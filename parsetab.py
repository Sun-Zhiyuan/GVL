
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_EDGE ADD_NODE ADJ ARRAY ASSIGN BFS BOOL CHANGE_EDGE_RGB CHANGE_NODE_RGB CHANGE_NODE_X CHANGE_NODE_Y CHAR COMMA DFS DIVIDE DOT EDGE ELSE EQUAL FALSE FLOAT FLOAT_CONST FOR GRAPH GREATER_THAN GREATER_THAN_EQUAL ID IF INT INT_CONST LBRACE LBRACKET LENGTH LESS_THAN LESS_THAN_EQUAL LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN MINUS MINUS_ASSIGN MODULO MODULO_ASSIGN NODE NOT_EQUAL PLUS PLUS_ASSIGN RBRACE RBRACKET REMOVE_EDGE REMOVE_NODE RETURN RPAREN SEMICOLON SHOW STRUCT TIMES TIMES_ASSIGN TRUE UNVISITED VISITED VOID WHILEprogram :   function_definition_list struct_definition_list function_definition_list : function_definition function_definition_list\n                                | emptystruct_definition_list : struct_definition struct_definition_list\n                              | emptyfunction_definition : type_specification ID LPAREN formal_parameters RPAREN block\n                           | type_specification DFS LPAREN formal_parameters RPAREN block\n                           | type_specification BFS LPAREN formal_parameters RPAREN blockstruct_definition : STRUCT ID LBRACE type_specification RBRACE SEMICOLONformal_parameters : formal_parameter COMMA formal_parameters\n                         | formal_parameter\n                         | emptyformal_parameter : type_specification ID\n                        | type_specification ID LBRACKET INT_CONST RBRACKET\n                        | type_specification ID LBRACKET RBRACKETtype_specification : INT\n                          | FLOAT\n                          | CHAR\n                          | BOOL\n                          | GRAPH\n                          | EDGE\n                          | NODE\n                          | VOIDblock : LBRACE compound_statement RBRACEcompound_statement : statement compound_statement\n                          | empty\n                          | variable_declaration compound_statement\n                          | special_function compound_statementvariable_declaration : type_specification ID SEMICOLON\n                             | type_specification ID ASSIGN expression_statement SEMICOLON\n                             | type_specification ID COMMA variable_declaration SEMICOLON\n                             | type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLONstatement : expression_statement\n                 | return_statement\n                 | if_statement\n                 | for_statement\n                 | while_statementspecial_function : add_node\n                        | add_edge\n                        | remove_node\n                        | remove_edge\n                        | change_node_rgb\n                        | change_node_x\n                        | change_node_y\n                        | change_edge_rgb\n                        | show\n                        | dfsadd_node : ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLONadd_edge : ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLONremove_node : REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLONremove_edge : REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLONchange_node_rgb : CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLONchange_node_x : CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLONchange_node_y : CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLONchange_edge_rgb : CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLONshow : SHOW LPAREN expression RPAREN SEMICOLONdfs : DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLONexpression_statement : expression SEMICOLONreturn_statement : RETURN expression_statementif_statement : IF LPAREN expression RPAREN LBRACE compound_statement RBRACE\n                    | IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE\n                    | IF LPAREN expression RPAREN block ELSE if_statementfor_statement : FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN blockwhile_statement : WHILE LPAREN expression RPAREN blockempty :expression : assign_expression\n                  | node_expressionassign_expression : equality_expression ASSIGN assign_expression\n                         | equality_expression\n                         | MINUS MINUS primary_expression\n                         | PLUS PLUS primary_expressionequality_expression : relational_expression\n                           | relational_expression EQUAL relational_expression\n                           | relational_expression LOGICAL_NOT ASSIGN relational_expressionunary_expression : primary_expression\n                        | PLUS primary_expression\n                        | MINUS primary_expression\n                        | LOGICAL_NOT primary_expressionrelational_expression : add_sub_expression compare_expressioncompare_expression : empty\n                          | LESS_THAN add_sub_expression compare_expression\n                          | LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression\n                          | GREATER_THAN add_sub_expression compare_expression\n                          | GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expressionadd_sub_expression : mul_div_mod_expression add_sub_tailadd_sub_tail : PLUS mul_div_mod_expression add_sub_tail\n                    | MINUS mul_div_mod_expression add_sub_tail\n                    | emptymul_div_mod_expression : unary_expression mul_div_mod_tailmul_div_mod_tail : TIMES unary_expression mul_div_mod_tail\n                        | DIVIDE unary_expression mul_div_mod_tail\n                        | MODULO unary_expression mul_div_mod_tail\n                        | emptyarray_assignment_expression : array_access ASSIGN expressionpost_increment_expression : PLUS PLUS primary_expression\n                                 | MINUS MINUS primary_expressionnode_expression : ID\n                       | ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET\n                       | INT_CONSTarray_access : ID LBRACKET expression RBRACKETprimary_expression : ID\n                          | ID args_expression\n                          | TRUE\n                          | FALSE\n                          | num_expression\n                          | ID LBRACKET expression RBRACKET\n                          | NODE\n                          | EDGE\n                          | GRAPH\n                          | LPAREN expression RPARENargs_expression : LPAREN RPAREN\n                       | LPAREN assign_expression_list RPARENassign_expression_list : empty\n                              | assign_expression\n                              | assign_expression COMMA assign_expression_listnum_expression : INT_CONST\n                      | FLOAT_CONST\n                      | function_num_expressionfunction_num_expression : LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN'
    
_lr_action_items = {'STRUCT':([0,2,3,4,15,18,42,45,46,47,110,],[-65,17,-65,-3,17,-2,-6,-7,-8,-9,-24,]),'$end':([0,1,2,3,4,14,15,16,18,22,42,45,46,47,110,],[-65,0,-65,-65,-3,-1,-65,-5,-2,-4,-6,-7,-8,-9,-24,]),'INT':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,126,164,166,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[6,6,6,6,6,6,6,-6,6,-7,-8,6,6,6,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,176,-29,6,-30,-31,6,-64,-56,-32,-60,6,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'FLOAT':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,166,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[7,7,7,7,7,7,7,-6,7,-7,-8,7,7,7,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,7,-30,-31,7,-64,-56,-32,-60,7,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'CHAR':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,166,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[8,8,8,8,8,8,8,-6,8,-7,-8,8,8,8,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,8,-30,-31,8,-64,-56,-32,-60,8,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'BOOL':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,166,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[9,9,9,9,9,9,9,-6,9,-7,-8,9,9,9,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,9,-30,-31,9,-64,-56,-32,-60,9,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'GRAPH':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,166,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[10,10,10,10,10,10,10,-6,79,-7,-8,79,79,79,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,123,123,123,123,123,-24,123,123,-58,-59,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-29,123,10,123,123,123,123,123,123,123,123,123,123,123,123,123,-30,-31,79,-64,123,-56,-32,123,123,123,-60,79,-62,123,123,123,-50,-51,123,123,-61,123,123,123,-53,-54,-57,123,123,123,123,123,123,-63,123,123,123,123,123,-52,-55,123,-49,-48,]),'EDGE':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,166,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[11,11,11,11,11,11,11,-6,80,-7,-8,80,80,80,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,122,122,122,122,122,-24,122,122,-58,-59,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-29,122,11,122,122,122,122,122,122,122,122,122,122,122,122,122,-30,-31,80,-64,122,-56,-32,122,122,122,-60,80,-62,122,122,122,-50,-51,122,122,-61,122,122,122,-53,-54,-57,122,122,122,122,122,122,-63,122,122,122,122,122,-52,-55,122,-49,-48,]),'NODE':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,166,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[12,12,12,12,12,12,12,-6,81,-7,-8,81,81,81,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,121,121,121,121,121,-24,121,121,-58,-59,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-29,121,12,121,121,121,121,121,121,121,121,121,121,121,121,121,-30,-31,81,-64,121,-56,-32,121,121,121,-60,81,-62,121,121,121,-50,-51,121,121,-61,121,121,121,-53,-54,-57,121,121,121,121,121,121,-63,121,121,121,121,121,-52,-55,121,-49,-48,]),'VOID':([0,3,24,25,26,27,37,42,43,45,46,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,166,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[13,13,13,13,13,13,13,-6,13,-7,-8,13,13,13,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,13,-30,-31,13,-64,-56,-32,-60,13,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'ID':([5,6,7,8,9,10,11,12,13,17,28,43,51,53,54,55,56,57,58,59,60,63,64,65,66,67,68,69,70,71,72,74,76,79,80,81,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,137,138,139,143,145,150,152,155,156,159,160,161,163,164,165,176,192,193,194,196,198,208,211,215,217,218,219,220,221,222,224,236,237,241,244,246,253,260,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[19,-16,-17,-18,-19,-20,-21,-22,-23,23,35,61,61,61,61,-33,-34,-35,-36,-37,114,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,61,61,-20,-21,-22,141,141,141,-24,61,141,-58,-59,61,61,61,61,61,61,61,61,61,61,61,187,141,141,141,141,141,141,141,141,141,141,141,204,-29,61,213,141,141,141,141,141,239,141,61,61,61,61,61,61,61,254,-30,-31,61,-64,61,-56,-32,61,61,61,288,289,290,-60,61,-62,61,61,61,-50,-51,61,61,-61,61,61,61,-53,-54,-57,61,141,141,61,61,61,-63,61,61,61,61,61,-52,-55,61,-49,-48,]),'DFS':([5,6,7,8,9,10,11,12,13,43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[20,-16,-17,-18,-19,-20,-21,-22,-23,91,91,91,91,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,91,-64,-56,-32,-60,91,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'BFS':([5,6,7,8,9,10,11,12,13,],[21,-16,-17,-18,-19,-20,-21,-22,-23,]),'RBRACE':([6,7,8,9,10,11,12,13,34,43,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,92,93,94,96,98,100,101,102,103,104,105,106,107,110,111,112,113,117,119,120,121,122,123,140,141,142,144,147,148,149,154,157,158,162,164,170,175,188,189,190,191,195,197,199,200,201,202,203,209,210,225,226,227,228,229,230,231,232,233,234,236,237,241,244,253,257,258,260,262,276,277,278,282,283,291,301,302,307,308,310,311,326,331,343,344,346,349,352,354,],[-16,-17,-18,-19,-20,-21,-22,-23,40,-65,110,-65,-26,-65,-65,-33,-34,-35,-36,-37,-97,-99,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-67,-66,-69,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,-24,-25,-27,-28,-102,-58,-59,-107,-108,-109,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,-29,-111,-110,-68,-70,-71,-73,-65,-65,-65,-65,-65,-65,-65,-106,-112,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,-30,-31,-65,-64,-56,-82,-84,-32,276,-60,-65,-62,-50,-51,302,-98,-61,-53,-54,-57,-119,-63,335,-52,-55,348,351,-49,-48,]),'LPAREN':([19,20,21,43,51,53,54,55,56,57,58,59,61,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,82,83,84,85,86,87,88,89,90,91,95,97,99,108,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,141,143,145,150,152,155,156,159,160,161,164,165,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[24,25,26,76,76,76,76,-33,-34,-35,-36,-37,118,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,76,124,76,126,127,128,129,130,131,132,133,134,135,136,137,76,76,76,163,-24,76,76,-58,-59,76,76,76,76,76,76,76,76,76,76,76,76,76,118,76,76,76,76,76,76,76,76,76,-29,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-30,-31,76,-64,76,-56,-32,76,76,76,-60,76,-62,76,76,76,-50,-51,76,76,-61,76,76,76,-53,-54,-57,76,76,76,76,76,76,-63,76,76,76,76,76,-52,-55,76,-49,-48,]),'LBRACE':([23,36,38,39,212,214,216,263,265,269,319,],[27,43,43,43,241,43,246,277,280,284,43,]),'RPAREN':([24,25,26,29,30,31,32,33,35,37,44,49,61,62,92,93,94,96,98,100,101,102,103,104,105,106,107,109,117,118,121,122,123,125,140,141,142,144,147,148,149,154,157,158,162,170,171,172,173,174,175,177,186,188,189,190,191,195,197,199,200,201,202,203,209,210,211,225,226,227,228,229,230,231,232,233,234,240,247,248,257,258,285,286,288,300,301,311,312,327,328,335,336,348,351,],[-65,-65,-65,36,-11,-12,38,39,-13,-65,-10,-15,-97,-99,-67,-66,-69,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,-14,-102,170,-107,-108,-109,175,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,-111,210,-113,-114,212,-110,214,223,-68,-70,-71,-73,-65,-65,-65,-65,-65,-65,-65,-106,-112,-65,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,-115,267,268,-82,-84,296,297,299,311,-98,-119,319,-95,-96,339,340,350,353,]),'COMMA':([30,35,49,61,62,92,93,94,96,98,100,101,102,103,104,105,106,107,109,114,117,121,122,123,140,141,142,144,147,148,149,154,157,158,162,170,173,175,178,179,180,181,182,183,184,185,187,188,189,190,191,195,197,199,200,201,202,203,209,210,225,226,227,228,229,230,231,232,233,234,245,249,250,251,252,254,255,256,257,258,266,287,293,294,295,301,309,311,315,316,317,325,329,330,337,338,345,],[37,-13,-15,-97,-99,-67,-66,-69,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,-14,166,-102,-107,-108,-109,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,-111,211,-110,215,216,217,218,219,220,221,222,224,-68,-70,-71,-73,-65,-65,-65,-65,-65,-65,-65,-106,-112,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,265,269,270,271,272,-97,273,-99,-82,-84,281,298,304,305,306,-98,318,-119,322,323,324,332,333,334,341,342,347,]),'LBRACKET':([35,61,114,141,168,259,261,],[41,116,167,116,208,274,275,]),'SEMICOLON':([40,61,62,73,79,80,81,92,93,94,96,98,100,101,102,103,104,105,106,107,114,117,119,121,122,123,140,141,142,144,147,148,149,154,157,158,162,164,170,175,188,189,190,191,195,197,199,200,201,202,203,205,206,209,210,223,225,226,227,228,229,230,231,232,233,234,236,237,238,257,258,260,264,267,268,292,296,297,299,301,311,339,340,350,353,],[47,-97,-99,119,-109,-108,-107,-67,-66,-69,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,164,-102,-58,-107,-108,-109,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,-29,-111,-110,-68,-70,-71,-73,-65,-65,-65,-65,-65,-65,-65,236,237,-106,-112,253,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,-30,-31,260,-82,-84,-32,279,282,283,303,307,308,310,-98,-119,343,344,352,354,]),'INT_CONST':([41,43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,167,192,193,194,196,198,211,215,217,218,219,220,221,222,224,236,237,241,243,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[48,62,62,62,62,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,62,62,142,142,142,-24,62,142,-58,-59,62,62,62,62,62,62,62,62,62,62,62,142,142,142,142,142,142,142,142,142,142,142,-29,62,207,142,142,142,142,142,142,62,62,62,62,62,62,62,256,-30,-31,62,264,-64,62,-56,-32,62,62,62,-60,62,-62,62,62,62,-50,-51,62,62,-61,62,62,62,-53,-54,-57,62,142,142,62,62,62,-63,62,62,62,62,62,-52,-55,62,-49,-48,]),'RBRACKET':([41,48,61,62,92,93,94,96,98,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,148,149,154,157,158,162,169,170,175,188,189,190,191,195,197,199,200,201,202,203,207,209,210,225,226,227,228,229,230,231,232,233,234,239,257,258,289,290,301,311,],[49,109,-97,-99,-67,-66,-69,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,209,-111,-110,-68,-70,-71,-73,-65,-65,-65,-65,-65,-65,-65,238,-106,-112,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,261,-82,-84,300,301,-98,-119,]),'RETURN':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[74,74,74,74,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,74,-64,-56,-32,-60,74,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'IF':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,263,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[75,75,75,75,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,75,-64,-56,-32,75,-60,75,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'FOR':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[77,77,77,77,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,77,-64,-56,-32,-60,77,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'WHILE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[78,78,78,78,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,78,-64,-56,-32,-60,78,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'ADD_NODE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[82,82,82,82,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,82,-64,-56,-32,-60,82,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'ADD_EDGE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[83,83,83,83,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,83,-64,-56,-32,-60,83,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'REMOVE_NODE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[84,84,84,84,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,84,-64,-56,-32,-60,84,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'REMOVE_EDGE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[85,85,85,85,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,85,-64,-56,-32,-60,85,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'CHANGE_NODE_RGB':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[86,86,86,86,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,86,-64,-56,-32,-60,86,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'CHANGE_NODE_X':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[87,87,87,87,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,87,-64,-56,-32,-60,87,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'CHANGE_NODE_Y':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[88,88,88,88,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,88,-64,-56,-32,-60,88,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'CHANGE_EDGE_RGB':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[89,89,89,89,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,89,-64,-56,-32,-60,89,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'SHOW':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,110,119,120,164,236,237,241,244,253,260,276,277,278,282,283,302,307,308,310,326,343,344,352,354,],[90,90,90,90,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-24,-58,-59,-29,-30,-31,90,-64,-56,-32,-60,90,-62,-50,-51,-61,-53,-54,-57,-63,-52,-55,-49,-48,]),'MINUS':([43,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,76,79,80,81,95,96,101,102,103,104,105,106,107,110,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,138,140,141,142,144,145,147,150,152,155,156,158,159,160,161,162,164,165,170,175,194,196,198,199,200,201,202,203,209,210,211,215,217,218,219,220,221,222,232,233,234,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,303,304,305,306,307,308,310,311,314,318,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[95,95,95,95,-33,-34,-35,-36,-37,-101,-116,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,95,95,-109,-108,-107,139,-75,156,-65,-103,-104,-105,-117,-118,-24,95,-102,95,-58,-59,-107,-108,-109,95,95,95,95,95,95,95,95,95,95,95,95,-77,-101,-116,-76,193,-78,193,193,193,193,-89,193,193,193,-93,-29,95,-111,-110,193,193,193,156,156,-65,-65,-65,-106,-112,95,95,95,95,95,95,95,95,-90,-91,-92,-30,-31,95,-64,95,-56,-32,95,95,95,-60,95,-62,95,95,95,-50,-51,95,95,-61,314,95,95,95,-53,-54,-57,-119,321,95,95,95,95,-63,95,95,95,95,95,-52,-55,95,-49,-48,]),'PLUS':([43,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,76,79,80,81,96,97,101,102,103,104,105,106,107,110,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,138,140,141,142,144,145,147,150,152,155,156,158,159,160,161,162,164,165,170,175,194,196,198,199,200,201,202,203,209,210,211,215,217,218,219,220,221,222,232,233,234,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,303,304,305,306,307,308,310,311,313,318,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[97,97,97,97,-33,-34,-35,-36,-37,-101,-116,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,97,97,-109,-108,-107,-75,143,155,-65,-103,-104,-105,-117,-118,-24,97,-102,97,-58,-59,-107,-108,-109,97,97,97,97,97,97,97,97,97,97,97,97,-77,-101,-116,-76,192,-78,192,192,192,192,-89,192,192,192,-93,-29,97,-111,-110,192,192,192,155,155,-65,-65,-65,-106,-112,97,97,97,97,97,97,97,97,-90,-91,-92,-30,-31,97,-64,97,-56,-32,97,97,97,-60,97,-62,97,97,97,-50,-51,97,97,-61,313,97,97,97,-53,-54,-57,-119,320,97,97,97,97,-63,97,97,97,97,97,-52,-55,97,-49,-48,]),'LOGICAL_NOT':([43,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,74,76,79,80,81,96,98,100,101,102,103,104,105,106,107,110,116,117,118,119,120,121,122,123,124,127,128,129,130,131,132,133,134,135,136,138,140,141,142,144,145,147,148,149,150,152,154,155,156,157,158,159,160,161,162,164,165,170,175,194,195,196,197,198,199,200,201,202,203,209,210,211,215,217,218,219,220,221,222,226,227,228,229,230,231,232,233,234,236,237,241,244,246,253,257,258,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,311,318,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[99,99,99,99,-33,-34,-35,-36,-37,-101,-116,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,99,99,-109,-108,-107,-75,146,-65,-65,-65,-103,-104,-105,-117,-118,-24,99,-102,99,-58,-59,-107,-108,-109,99,99,99,99,99,99,99,99,99,99,99,99,-77,-101,-116,-76,99,-78,-79,-80,99,99,-85,99,99,-88,-89,99,99,99,-93,-29,99,-111,-110,99,-65,99,-65,99,-65,-65,-65,-65,-65,-106,-112,99,99,99,99,99,99,99,99,-81,-65,-83,-65,-86,-87,-90,-91,-92,-30,-31,99,-64,99,-56,-82,-84,-32,99,99,99,-60,99,-62,99,99,99,-50,-51,99,99,-61,99,99,99,-53,-54,-57,-119,99,99,99,99,-63,99,99,99,99,99,-52,-55,99,-49,-48,]),'TRUE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[103,103,103,103,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,103,103,103,103,103,-24,103,103,-58,-59,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-29,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-30,-31,103,-64,103,-56,-32,103,103,103,-60,103,-62,103,103,103,-50,-51,103,103,-61,103,103,103,-53,-54,-57,103,103,103,103,103,103,-63,103,103,103,103,103,-52,-55,103,-49,-48,]),'FALSE':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[104,104,104,104,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,104,104,104,104,104,-24,104,104,-58,-59,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-29,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-30,-31,104,-64,104,-56,-32,104,104,104,-60,104,-62,104,104,104,-50,-51,104,104,-61,104,104,104,-53,-54,-57,104,104,104,104,104,104,-63,104,104,104,104,104,-52,-55,104,-49,-48,]),'FLOAT_CONST':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[106,106,106,106,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,106,106,106,106,106,-24,106,106,-58,-59,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-29,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-30,-31,106,-64,106,-56,-32,106,106,106,-60,106,-62,106,106,106,-50,-51,106,106,-61,106,106,106,-53,-54,-57,106,106,106,106,106,106,-63,106,106,106,106,106,-52,-55,106,-49,-48,]),'LENGTH':([43,51,53,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,72,74,76,95,97,99,110,116,118,119,120,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,164,165,192,193,194,196,198,211,215,217,218,219,220,221,222,236,237,241,244,246,253,260,270,271,272,276,277,278,279,280,281,282,283,284,298,302,304,305,306,307,308,310,318,320,321,322,323,324,326,332,333,334,341,342,343,344,347,352,354,],[108,108,108,108,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,108,108,108,108,108,-24,108,108,-58,-59,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-29,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-30,-31,108,-64,108,-56,-32,108,108,108,-60,108,-62,108,108,108,-50,-51,108,108,-61,108,108,108,-53,-54,-57,108,108,108,108,108,108,-63,108,108,108,108,108,-52,-55,108,-49,-48,]),'DOT':([61,204,254,],[115,235,115,]),'TIMES':([61,62,79,80,81,96,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,170,175,201,202,203,209,210,311,],[-101,-116,-109,-108,-107,-75,159,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-111,-110,159,159,159,-106,-112,-119,]),'DIVIDE':([61,62,79,80,81,96,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,170,175,201,202,203,209,210,311,],[-101,-116,-109,-108,-107,-75,160,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-111,-110,160,160,160,-106,-112,-119,]),'MODULO':([61,62,79,80,81,96,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,170,175,201,202,203,209,210,311,],[-101,-116,-109,-108,-107,-75,161,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-111,-110,161,161,161,-106,-112,-119,]),'LESS_THAN':([61,62,79,80,81,96,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,154,157,158,162,170,175,195,197,199,200,201,202,203,209,210,227,229,230,231,232,233,234,311,],[-101,-116,-109,-108,-107,-75,150,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-85,-88,-89,-93,-111,-110,150,150,-65,-65,-65,-65,-65,-106,-112,150,150,-86,-87,-90,-91,-92,-119,]),'LESS_THAN_EQUAL':([61,62,79,80,81,96,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,154,157,158,162,170,175,195,197,199,200,201,202,203,209,210,227,229,230,231,232,233,234,311,],[-101,-116,-109,-108,-107,-75,151,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-85,-88,-89,-93,-111,-110,151,151,-65,-65,-65,-65,-65,-106,-112,151,151,-86,-87,-90,-91,-92,-119,]),'GREATER_THAN':([61,62,79,80,81,96,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,154,157,158,162,170,175,195,197,199,200,201,202,203,209,210,227,229,230,231,232,233,234,311,],[-101,-116,-109,-108,-107,-75,152,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-85,-88,-89,-93,-111,-110,152,152,-65,-65,-65,-65,-65,-106,-112,152,152,-86,-87,-90,-91,-92,-119,]),'GREATER_THAN_EQUAL':([61,62,79,80,81,96,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,154,157,158,162,170,175,195,197,199,200,201,202,203,209,210,227,229,230,231,232,233,234,311,],[-101,-116,-109,-108,-107,-75,153,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-85,-88,-89,-93,-111,-110,153,153,-65,-65,-65,-65,-65,-106,-112,153,153,-86,-87,-90,-91,-92,-119,]),'EQUAL':([61,62,79,80,81,96,98,100,101,102,103,104,105,106,107,117,121,122,123,140,141,142,144,147,148,149,154,157,158,162,170,175,195,197,199,200,201,202,203,209,210,226,227,228,229,230,231,232,233,234,257,258,311,],[-101,-116,-109,-108,-107,-75,145,-65,-65,-65,-103,-104,-105,-117,-118,-102,-107,-108,-109,-77,-101,-116,-76,-78,-79,-80,-85,-88,-89,-93,-111,-110,-65,-65,-65,-65,-65,-65,-65,-106,-112,-81,-65,-83,-65,-86,-87,-90,-91,-92,-82,-84,-119,]),'ASSIGN':([61,62,79,80,81,94,96,98,100,101,102,103,104,105,106,107,114,117,121,122,123,140,141,142,144,146,147,148,149,151,153,154,157,158,162,170,175,191,195,197,199,200,201,202,203,209,210,213,225,226,227,228,229,230,231,232,233,234,257,258,311,],[-101,-116,-109,-108,-107,138,-75,-72,-65,-65,-65,-103,-104,-105,-117,-118,165,-102,-107,-108,-109,-77,-101,-116,-76,194,-78,-79,-80,196,198,-85,-88,-89,-93,-111,-110,-73,-65,-65,-65,-65,-65,-65,-65,-106,-112,243,-74,-81,-65,-83,-65,-86,-87,-90,-91,-92,-82,-84,-119,]),'ADJ':([115,235,],[168,259,]),'ELSE':([242,276,],[263,-24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_definition_list':([0,3,],[2,18,]),'function_definition':([0,3,],[3,3,]),'empty':([0,2,3,15,24,25,26,37,43,51,53,54,100,101,102,118,195,197,199,200,201,202,203,211,227,229,241,277,],[4,16,4,16,31,31,31,31,52,52,52,52,149,157,162,172,149,149,157,157,162,162,162,172,149,149,52,52,]),'type_specification':([0,3,24,25,26,27,37,43,51,53,54,166,241,277,],[5,5,28,28,28,34,28,60,60,60,60,60,60,60,]),'struct_definition_list':([2,15,],[14,22,]),'struct_definition':([2,15,],[15,15,]),'formal_parameters':([24,25,26,37,],[29,32,33,44,]),'formal_parameter':([24,25,26,37,],[30,30,30,30,]),'block':([36,38,39,212,214,319,],[42,45,46,242,244,326,]),'compound_statement':([43,51,53,54,241,277,],[50,111,112,113,262,291,]),'statement':([43,51,53,54,241,277,],[51,51,51,51,51,51,]),'variable_declaration':([43,51,53,54,166,241,277,],[53,53,53,53,206,53,53,]),'special_function':([43,51,53,54,241,277,],[54,54,54,54,54,54,]),'expression_statement':([43,51,53,54,74,165,241,277,],[55,55,55,55,120,205,55,55,]),'return_statement':([43,51,53,54,241,277,],[56,56,56,56,56,56,]),'if_statement':([43,51,53,54,241,263,277,],[57,57,57,57,57,278,57,]),'for_statement':([43,51,53,54,241,277,],[58,58,58,58,58,58,]),'while_statement':([43,51,53,54,241,277,],[59,59,59,59,59,59,]),'add_node':([43,51,53,54,241,277,],[63,63,63,63,63,63,]),'add_edge':([43,51,53,54,241,277,],[64,64,64,64,64,64,]),'remove_node':([43,51,53,54,241,277,],[65,65,65,65,65,65,]),'remove_edge':([43,51,53,54,241,277,],[66,66,66,66,66,66,]),'change_node_rgb':([43,51,53,54,241,277,],[67,67,67,67,67,67,]),'change_node_x':([43,51,53,54,241,277,],[68,68,68,68,68,68,]),'change_node_y':([43,51,53,54,241,277,],[69,69,69,69,69,69,]),'change_edge_rgb':([43,51,53,54,241,277,],[70,70,70,70,70,70,]),'show':([43,51,53,54,241,277,],[71,71,71,71,71,71,]),'dfs':([43,51,53,54,241,277,],[72,72,72,72,72,72,]),'expression':([43,51,53,54,74,76,116,124,127,128,129,130,131,132,133,134,135,136,165,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[73,73,73,73,73,125,169,174,177,178,179,180,181,182,183,184,185,186,73,245,247,248,249,250,251,252,73,266,285,286,287,73,292,293,294,295,309,315,316,317,325,329,330,331,336,337,338,345,346,349,]),'node_expression':([43,51,53,54,74,76,116,124,127,128,129,130,131,132,133,134,135,136,165,215,217,218,219,220,221,222,224,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,255,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'assign_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,165,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[93,93,93,93,93,93,93,173,93,93,93,93,93,93,93,93,93,93,93,188,93,173,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'equality_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,165,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'primary_expression':([43,51,53,54,74,76,95,97,99,116,118,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,165,192,193,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,320,321,322,323,324,332,333,334,341,342,347,],[96,96,96,96,96,96,140,144,147,96,96,96,96,96,96,96,96,96,96,96,96,96,96,189,190,96,96,96,96,96,96,96,96,96,144,140,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,327,328,96,96,96,96,96,96,96,96,96,]),'relational_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,145,165,194,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,191,98,225,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'add_sub_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,145,150,152,165,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,195,197,100,100,227,229,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'mul_div_mod_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,145,150,152,155,156,165,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,199,200,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'unary_expression':([43,51,53,54,74,76,116,118,124,127,128,129,130,131,132,133,134,135,136,138,145,150,152,155,156,159,160,161,165,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,322,323,324,332,333,334,341,342,347,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,201,202,203,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'num_expression':([43,51,53,54,74,76,95,97,99,116,118,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,165,192,193,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,320,321,322,323,324,332,333,334,341,342,347,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'function_num_expression':([43,51,53,54,74,76,95,97,99,116,118,124,127,128,129,130,131,132,133,134,135,136,138,139,143,145,150,152,155,156,159,160,161,165,192,193,194,196,198,211,215,217,218,219,220,221,222,241,246,270,271,272,277,279,280,281,284,298,304,305,306,318,320,321,322,323,324,332,333,334,341,342,347,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'args_expression':([61,141,],[117,117,]),'compare_expression':([100,195,197,227,229,],[148,226,228,257,258,]),'add_sub_tail':([101,199,200,],[154,230,231,]),'mul_div_mod_tail':([102,201,202,203,],[158,232,233,234,]),'assign_expression_list':([118,211,],[171,240,]),'post_increment_expression':([303,],[312,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_definition_list struct_definition_list','program',2,'p_program','lexical.py',260),
  ('function_definition_list -> function_definition function_definition_list','function_definition_list',2,'p_function_definition_list','lexical.py',265),
  ('function_definition_list -> empty','function_definition_list',1,'p_function_definition_list','lexical.py',266),
  ('struct_definition_list -> struct_definition struct_definition_list','struct_definition_list',2,'p_struct_definition_list','lexical.py',281),
  ('struct_definition_list -> empty','struct_definition_list',1,'p_struct_definition_list','lexical.py',282),
  ('function_definition -> type_specification ID LPAREN formal_parameters RPAREN block','function_definition',6,'p_function_definition','lexical.py',291),
  ('function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block','function_definition',6,'p_function_definition','lexical.py',292),
  ('function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block','function_definition',6,'p_function_definition','lexical.py',293),
  ('struct_definition -> STRUCT ID LBRACE type_specification RBRACE SEMICOLON','struct_definition',6,'p_struct_definition','lexical.py',303),
  ('formal_parameters -> formal_parameter COMMA formal_parameters','formal_parameters',3,'p_formal_parameters','lexical.py',313),
  ('formal_parameters -> formal_parameter','formal_parameters',1,'p_formal_parameters','lexical.py',314),
  ('formal_parameters -> empty','formal_parameters',1,'p_formal_parameters','lexical.py',315),
  ('formal_parameter -> type_specification ID','formal_parameter',2,'p_formal_parameter','lexical.py',330),
  ('formal_parameter -> type_specification ID LBRACKET INT_CONST RBRACKET','formal_parameter',5,'p_formal_parameter','lexical.py',331),
  ('formal_parameter -> type_specification ID LBRACKET RBRACKET','formal_parameter',4,'p_formal_parameter','lexical.py',332),
  ('type_specification -> INT','type_specification',1,'p_type_specification','lexical.py',344),
  ('type_specification -> FLOAT','type_specification',1,'p_type_specification','lexical.py',345),
  ('type_specification -> CHAR','type_specification',1,'p_type_specification','lexical.py',346),
  ('type_specification -> BOOL','type_specification',1,'p_type_specification','lexical.py',347),
  ('type_specification -> GRAPH','type_specification',1,'p_type_specification','lexical.py',348),
  ('type_specification -> EDGE','type_specification',1,'p_type_specification','lexical.py',349),
  ('type_specification -> NODE','type_specification',1,'p_type_specification','lexical.py',350),
  ('type_specification -> VOID','type_specification',1,'p_type_specification','lexical.py',351),
  ('block -> LBRACE compound_statement RBRACE','block',3,'p_block','lexical.py',356),
  ('compound_statement -> statement compound_statement','compound_statement',2,'p_compound_statement','lexical.py',362),
  ('compound_statement -> empty','compound_statement',1,'p_compound_statement','lexical.py',363),
  ('compound_statement -> variable_declaration compound_statement','compound_statement',2,'p_compound_statement','lexical.py',364),
  ('compound_statement -> special_function compound_statement','compound_statement',2,'p_compound_statement','lexical.py',365),
  ('variable_declaration -> type_specification ID SEMICOLON','variable_declaration',3,'p_variable_declaration','lexical.py',374),
  ('variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON','variable_declaration',5,'p_variable_declaration','lexical.py',375),
  ('variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON','variable_declaration',5,'p_variable_declaration','lexical.py',376),
  ('variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON','variable_declaration',6,'p_variable_declaration','lexical.py',377),
  ('statement -> expression_statement','statement',1,'p_statement','lexical.py',390),
  ('statement -> return_statement','statement',1,'p_statement','lexical.py',391),
  ('statement -> if_statement','statement',1,'p_statement','lexical.py',392),
  ('statement -> for_statement','statement',1,'p_statement','lexical.py',393),
  ('statement -> while_statement','statement',1,'p_statement','lexical.py',394),
  ('special_function -> add_node','special_function',1,'p_special_function','lexical.py',400),
  ('special_function -> add_edge','special_function',1,'p_special_function','lexical.py',401),
  ('special_function -> remove_node','special_function',1,'p_special_function','lexical.py',402),
  ('special_function -> remove_edge','special_function',1,'p_special_function','lexical.py',403),
  ('special_function -> change_node_rgb','special_function',1,'p_special_function','lexical.py',404),
  ('special_function -> change_node_x','special_function',1,'p_special_function','lexical.py',405),
  ('special_function -> change_node_y','special_function',1,'p_special_function','lexical.py',406),
  ('special_function -> change_edge_rgb','special_function',1,'p_special_function','lexical.py',407),
  ('special_function -> show','special_function',1,'p_special_function','lexical.py',408),
  ('special_function -> dfs','special_function',1,'p_special_function','lexical.py',409),
  ('add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON','add_node',21,'p_add_node','lexical.py',414),
  ('add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON','add_edge',19,'p_add_edge','lexical.py',420),
  ('remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON','remove_node',7,'p_remove_node','lexical.py',428),
  ('remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON','remove_edge',7,'p_remove_edge','lexical.py',434),
  ('change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON','change_node_rgb',15,'p_change_node_rgb','lexical.py',440),
  ('change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON','change_node_x',9,'p_change_node_x','lexical.py',446),
  ('change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON','change_node_y',9,'p_change_node_y','lexical.py',452),
  ('change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON','change_edge_rgb',15,'p_change_edge_rgb','lexical.py',458),
  ('show -> SHOW LPAREN expression RPAREN SEMICOLON','show',5,'p_show','lexical.py',464),
  ('dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON','dfs',9,'p_dfs','lexical.py',470),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','lexical.py',476),
  ('return_statement -> RETURN expression_statement','return_statement',2,'p_return_statement','lexical.py',482),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE','if_statement',7,'p_if_statement','lexical.py',488),
  ('if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE','if_statement',9,'p_if_statement','lexical.py',489),
  ('if_statement -> IF LPAREN expression RPAREN block ELSE if_statement','if_statement',7,'p_if_statement','lexical.py',490),
  ('for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block','for_statement',12,'p_for_statement','lexical.py',504),
  ('while_statement -> WHILE LPAREN expression RPAREN block','while_statement',5,'p_while_statement','lexical.py',510),
  ('empty -> <empty>','empty',0,'p_empty','lexical.py',516),
  ('expression -> assign_expression','expression',1,'p_expression','lexical.py',521),
  ('expression -> node_expression','expression',1,'p_expression','lexical.py',522),
  ('assign_expression -> equality_expression ASSIGN assign_expression','assign_expression',3,'p_assign_expression','lexical.py',528),
  ('assign_expression -> equality_expression','assign_expression',1,'p_assign_expression','lexical.py',529),
  ('assign_expression -> MINUS MINUS primary_expression','assign_expression',3,'p_assign_expression','lexical.py',530),
  ('assign_expression -> PLUS PLUS primary_expression','assign_expression',3,'p_assign_expression','lexical.py',531),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','lexical.py',536),
  ('equality_expression -> relational_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','lexical.py',537),
  ('equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression','equality_expression',4,'p_equality_expression','lexical.py',538),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','lexical.py',543),
  ('unary_expression -> PLUS primary_expression','unary_expression',2,'p_unary_expression','lexical.py',544),
  ('unary_expression -> MINUS primary_expression','unary_expression',2,'p_unary_expression','lexical.py',545),
  ('unary_expression -> LOGICAL_NOT primary_expression','unary_expression',2,'p_unary_expression','lexical.py',546),
  ('relational_expression -> add_sub_expression compare_expression','relational_expression',2,'p_relational_expression','lexical.py',551),
  ('compare_expression -> empty','compare_expression',1,'p_compare_expression','lexical.py',556),
  ('compare_expression -> LESS_THAN add_sub_expression compare_expression','compare_expression',3,'p_compare_expression','lexical.py',557),
  ('compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression','compare_expression',4,'p_compare_expression','lexical.py',558),
  ('compare_expression -> GREATER_THAN add_sub_expression compare_expression','compare_expression',3,'p_compare_expression','lexical.py',559),
  ('compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression','compare_expression',4,'p_compare_expression','lexical.py',560),
  ('add_sub_expression -> mul_div_mod_expression add_sub_tail','add_sub_expression',2,'p_add_sub','lexical.py',564),
  ('add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail','add_sub_tail',3,'p_add_sub_tail','lexical.py',569),
  ('add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail','add_sub_tail',3,'p_add_sub_tail','lexical.py',570),
  ('add_sub_tail -> empty','add_sub_tail',1,'p_add_sub_tail','lexical.py',571),
  ('mul_div_mod_expression -> unary_expression mul_div_mod_tail','mul_div_mod_expression',2,'p_mul_div_mod','lexical.py',576),
  ('mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail','mul_div_mod_tail',3,'p_mul_div_mod_tail','lexical.py',581),
  ('mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail','mul_div_mod_tail',3,'p_mul_div_mod_tail','lexical.py',582),
  ('mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail','mul_div_mod_tail',3,'p_mul_div_mod_tail','lexical.py',583),
  ('mul_div_mod_tail -> empty','mul_div_mod_tail',1,'p_mul_div_mod_tail','lexical.py',584),
  ('array_assignment_expression -> array_access ASSIGN expression','array_assignment_expression',3,'p_array_assignment_expression','lexical.py',589),
  ('post_increment_expression -> PLUS PLUS primary_expression','post_increment_expression',3,'p_post_increment_expression','lexical.py',594),
  ('post_increment_expression -> MINUS MINUS primary_expression','post_increment_expression',3,'p_post_increment_expression','lexical.py',595),
  ('node_expression -> ID','node_expression',1,'p_node_expression','lexical.py',599),
  ('node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET','node_expression',9,'p_node_expression','lexical.py',600),
  ('node_expression -> INT_CONST','node_expression',1,'p_node_expression','lexical.py',601),
  ('array_access -> ID LBRACKET expression RBRACKET','array_access',4,'p_array_access','lexical.py',605),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','lexical.py',610),
  ('primary_expression -> ID args_expression','primary_expression',2,'p_primary_expression','lexical.py',611),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','lexical.py',612),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','lexical.py',613),
  ('primary_expression -> num_expression','primary_expression',1,'p_primary_expression','lexical.py',614),
  ('primary_expression -> ID LBRACKET expression RBRACKET','primary_expression',4,'p_primary_expression','lexical.py',615),
  ('primary_expression -> NODE','primary_expression',1,'p_primary_expression','lexical.py',616),
  ('primary_expression -> EDGE','primary_expression',1,'p_primary_expression','lexical.py',617),
  ('primary_expression -> GRAPH','primary_expression',1,'p_primary_expression','lexical.py',618),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','lexical.py',619),
  ('args_expression -> LPAREN RPAREN','args_expression',2,'p_args_expression','lexical.py',624),
  ('args_expression -> LPAREN assign_expression_list RPAREN','args_expression',3,'p_args_expression','lexical.py',625),
  ('assign_expression_list -> empty','assign_expression_list',1,'p_assign_expression_list','lexical.py',629),
  ('assign_expression_list -> assign_expression','assign_expression_list',1,'p_assign_expression_list','lexical.py',630),
  ('assign_expression_list -> assign_expression COMMA assign_expression_list','assign_expression_list',3,'p_assign_expression_list','lexical.py',631),
  ('num_expression -> INT_CONST','num_expression',1,'p_num_expression','lexical.py',635),
  ('num_expression -> FLOAT_CONST','num_expression',1,'p_num_expression','lexical.py',636),
  ('num_expression -> function_num_expression','num_expression',1,'p_num_expression','lexical.py',637),
  ('function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN','function_num_expression',9,'p_function_num_expression','lexical.py',641),
]
