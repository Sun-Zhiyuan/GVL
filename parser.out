Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    LOGICAL_AND
    LOGICAL_OR
    MINUS_ASSIGN
    MODULO_ASSIGN
    NOT_EQUAL
    PLUS_ASSIGN
    TIMES_ASSIGN
    UNVISITED
    VISITED

Grammar

Rule 0     S' -> program
Rule 1     program -> function_definition_list struct_definition_list
Rule 2     function_definition_list -> function_definition function_definition_list
Rule 3     function_definition_list -> empty
Rule 4     struct_definition_list -> struct_definition struct_definition_list
Rule 5     struct_definition_list -> empty
Rule 6     function_definition -> type_specification ID LPAREN formal_parameters RPAREN block
Rule 7     function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block
Rule 8     function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block
Rule 9     struct_definition -> STRUCT ID LBRACE type_specification RBRACE SEMICOLON
Rule 10    formal_parameters -> formal_parameter COMMA formal_parameters
Rule 11    formal_parameters -> formal_parameter
Rule 12    formal_parameters -> empty
Rule 13    formal_parameter -> type_specification ID
Rule 14    formal_parameter -> type_specification ID LBRACKET INT_CONST RBRACKET
Rule 15    formal_parameter -> type_specification ID LBRACKET RBRACKET
Rule 16    type_specification -> INT
Rule 17    type_specification -> FLOAT
Rule 18    type_specification -> CHAR
Rule 19    type_specification -> BOOL
Rule 20    type_specification -> GRAPH
Rule 21    type_specification -> EDGE
Rule 22    type_specification -> NODE
Rule 23    type_specification -> VOID
Rule 24    block -> LBRACE compound_statement RBRACE
Rule 25    compound_statement -> statement compound_statement
Rule 26    compound_statement -> empty
Rule 27    compound_statement -> variable_declaration compound_statement
Rule 28    compound_statement -> special_function compound_statement
Rule 29    variable_declaration -> type_specification ID SEMICOLON
Rule 30    variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON
Rule 31    variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON
Rule 32    variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
Rule 33    statement -> expression_statement
Rule 34    statement -> return_statement
Rule 35    statement -> if_statement
Rule 36    statement -> for_statement
Rule 37    statement -> while_statement
Rule 38    special_function -> add_node
Rule 39    special_function -> add_edge
Rule 40    special_function -> remove_node
Rule 41    special_function -> remove_edge
Rule 42    special_function -> change_node_rgb
Rule 43    special_function -> change_node_x
Rule 44    special_function -> change_node_y
Rule 45    special_function -> change_edge_rgb
Rule 46    special_function -> show
Rule 47    special_function -> dfs
Rule 48    add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
Rule 49    add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
Rule 50    remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
Rule 51    remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
Rule 52    change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
Rule 53    change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
Rule 54    change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
Rule 55    change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
Rule 56    show -> SHOW LPAREN expression RPAREN SEMICOLON
Rule 57    dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
Rule 58    expression_statement -> expression SEMICOLON
Rule 59    return_statement -> RETURN expression_statement
Rule 60    if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
Rule 61    if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
Rule 62    if_statement -> IF LPAREN expression RPAREN block ELSE if_statement
Rule 63    for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
Rule 64    while_statement -> WHILE LPAREN expression RPAREN block
Rule 65    empty -> <empty>
Rule 66    expression -> assign_expression
Rule 67    expression -> node_expression
Rule 68    assign_expression -> equality_expression ASSIGN assign_expression
Rule 69    assign_expression -> equality_expression
Rule 70    assign_expression -> MINUS MINUS primary_expression
Rule 71    assign_expression -> PLUS PLUS primary_expression
Rule 72    equality_expression -> relational_expression
Rule 73    equality_expression -> relational_expression EQUAL relational_expression
Rule 74    equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression
Rule 75    unary_expression -> primary_expression
Rule 76    unary_expression -> PLUS primary_expression
Rule 77    unary_expression -> MINUS primary_expression
Rule 78    unary_expression -> LOGICAL_NOT primary_expression
Rule 79    relational_expression -> add_sub_expression compare_expression
Rule 80    compare_expression -> empty
Rule 81    compare_expression -> LESS_THAN add_sub_expression compare_expression
Rule 82    compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
Rule 83    compare_expression -> GREATER_THAN add_sub_expression compare_expression
Rule 84    compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
Rule 85    add_sub_expression -> mul_div_mod_expression add_sub_tail
Rule 86    add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail
Rule 87    add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail
Rule 88    add_sub_tail -> empty
Rule 89    mul_div_mod_expression -> unary_expression mul_div_mod_tail
Rule 90    mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail
Rule 91    mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail
Rule 92    mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail
Rule 93    mul_div_mod_tail -> empty
Rule 94    array_assignment_expression -> array_access ASSIGN expression
Rule 95    post_increment_expression -> PLUS PLUS primary_expression
Rule 96    post_increment_expression -> MINUS MINUS primary_expression
Rule 97    node_expression -> ID
Rule 98    node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
Rule 99    node_expression -> INT_CONST
Rule 100   array_access -> ID LBRACKET expression RBRACKET
Rule 101   primary_expression -> ID
Rule 102   primary_expression -> ID args_expression
Rule 103   primary_expression -> TRUE
Rule 104   primary_expression -> FALSE
Rule 105   primary_expression -> num_expression
Rule 106   primary_expression -> ID LBRACKET expression RBRACKET
Rule 107   primary_expression -> NODE
Rule 108   primary_expression -> EDGE
Rule 109   primary_expression -> GRAPH
Rule 110   primary_expression -> LPAREN expression RPAREN
Rule 111   args_expression -> LPAREN RPAREN
Rule 112   args_expression -> LPAREN assign_expression_list RPAREN
Rule 113   assign_expression_list -> empty
Rule 114   assign_expression_list -> assign_expression
Rule 115   assign_expression_list -> assign_expression COMMA assign_expression_list
Rule 116   num_expression -> INT_CONST
Rule 117   num_expression -> FLOAT_CONST
Rule 118   num_expression -> function_num_expression
Rule 119   function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

Terminals, with rules where they appear

ADD_EDGE             : 49
ADD_NODE             : 48
ADJ                  : 98 119
ARRAY                : 
ASSIGN               : 30 63 68 74 82 84 94
BFS                  : 8
BOOL                 : 19
CHANGE_EDGE_RGB      : 55
CHANGE_NODE_RGB      : 52
CHANGE_NODE_X        : 53
CHANGE_NODE_Y        : 54
CHAR                 : 18
COMMA                : 10 31 48 48 48 48 48 48 48 49 49 49 49 49 49 50 51 52 52 52 52 53 53 54 54 55 55 55 55 55 57 57 115
DFS                  : 7 57
DIVIDE               : 91
DOT                  : 98 119
EDGE                 : 21 108
ELSE                 : 61 62
EQUAL                : 73
FALSE                : 104
FLOAT                : 17
FLOAT_CONST          : 117
FOR                  : 63
GRAPH                : 20 109
GREATER_THAN         : 83
GREATER_THAN_EQUAL   : 84
ID                   : 6 9 13 14 15 29 30 31 32 57 57 63 97 98 98 98 100 101 102 106 119 119
IF                   : 60 61 62
INT                  : 16 63
INT_CONST            : 14 32 63 99 116
LBRACE               : 9 24 48 49 52 60 61
LBRACKET             : 14 15 32 98 98 100 106 119
LENGTH               : 119
LESS_THAN            : 81
LESS_THAN_EQUAL      : 82
LOGICAL_AND          : 
LOGICAL_NOT          : 74 78
LOGICAL_OR           : 
LPAREN               : 6 7 8 48 49 50 51 52 53 54 55 56 57 60 61 62 63 64 110 111 112 119
MINUS                : 70 70 77 87 96 96
MINUS_ASSIGN         : 
MODULO               : 92
MODULO_ASSIGN        : 
NODE                 : 22 107
NOT_EQUAL            : 
PLUS                 : 71 71 76 86 95 95
PLUS_ASSIGN          : 
RBRACE               : 9 24 48 49 52 60 61
RBRACKET             : 14 15 32 98 98 100 106 119
REMOVE_EDGE          : 51
REMOVE_NODE          : 50
RETURN               : 59
RPAREN               : 6 7 8 48 49 50 51 52 53 54 55 56 57 60 61 62 63 64 110 111 112 119
SEMICOLON            : 9 29 30 31 32 48 49 50 51 52 53 54 55 56 57 58 63 63
SHOW                 : 56
STRUCT               : 9
TIMES                : 90
TIMES_ASSIGN         : 
TRUE                 : 103
UNVISITED            : 
VISITED              : 
VOID                 : 23
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

add_edge             : 39
add_node             : 38
add_sub_expression   : 79 81 82 83 84
add_sub_tail         : 85 86 87
args_expression      : 102
array_access         : 94
array_assignment_expression : 
assign_expression    : 66 68 114 115
assign_expression_list : 112 115
block                : 6 7 8 61 62 63 64
change_edge_rgb      : 45
change_node_rgb      : 42
change_node_x        : 43
change_node_y        : 44
compare_expression   : 79 81 82 83 84
compound_statement   : 24 25 27 28 60 61
dfs                  : 47
empty                : 3 5 12 26 80 88 93 113
equality_expression  : 68 69
expression           : 48 48 48 48 48 48 48 48 49 49 49 49 49 49 49 50 50 51 51 52 52 52 52 52 53 53 53 54 54 54 55 55 55 55 55 55 56 58 60 61 62 63 64 94 100 106 110
expression_statement : 30 33 59
for_statement        : 36
formal_parameter     : 10 11
formal_parameters    : 6 7 8 10
function_definition  : 2
function_definition_list : 1 2
function_num_expression : 118
if_statement         : 35 62
mul_div_mod_expression : 85 86 87
mul_div_mod_tail     : 89 90 91 92
node_expression      : 57 67
num_expression       : 105
post_increment_expression : 63
primary_expression   : 70 71 75 76 77 78 95 96
program              : 0
relational_expression : 72 73 73 74 74
remove_edge          : 41
remove_node          : 40
return_statement     : 34
show                 : 46
special_function     : 28
statement            : 25
struct_definition    : 4
struct_definition_list : 1 4
type_specification   : 6 7 8 9 13 14 15 29 30 31 32
unary_expression     : 89 90 91 92
variable_declaration : 27 31
while_statement      : 37

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_definition_list struct_definition_list
    (2) function_definition_list -> . function_definition function_definition_list
    (3) function_definition_list -> . empty
    (6) function_definition -> . type_specification ID LPAREN formal_parameters RPAREN block
    (7) function_definition -> . type_specification DFS LPAREN formal_parameters RPAREN block
    (8) function_definition -> . type_specification BFS LPAREN formal_parameters RPAREN block
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    STRUCT          reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    program                        shift and go to state 1
    function_definition_list       shift and go to state 2
    function_definition            shift and go to state 3
    empty                          shift and go to state 4
    type_specification             shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> function_definition_list . struct_definition_list
    (4) struct_definition_list -> . struct_definition struct_definition_list
    (5) struct_definition_list -> . empty
    (9) struct_definition -> . STRUCT ID LBRACE type_specification RBRACE SEMICOLON
    (65) empty -> .

    STRUCT          shift and go to state 17
    $end            reduce using rule 65 (empty -> .)

    struct_definition_list         shift and go to state 14
    struct_definition              shift and go to state 15
    empty                          shift and go to state 16

state 3

    (2) function_definition_list -> function_definition . function_definition_list
    (2) function_definition_list -> . function_definition function_definition_list
    (3) function_definition_list -> . empty
    (6) function_definition -> . type_specification ID LPAREN formal_parameters RPAREN block
    (7) function_definition -> . type_specification DFS LPAREN formal_parameters RPAREN block
    (8) function_definition -> . type_specification BFS LPAREN formal_parameters RPAREN block
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    STRUCT          reduce using rule 65 (empty -> .)
    $end            reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    function_definition            shift and go to state 3
    function_definition_list       shift and go to state 18
    empty                          shift and go to state 4
    type_specification             shift and go to state 5

state 4

    (3) function_definition_list -> empty .

    STRUCT          reduce using rule 3 (function_definition_list -> empty .)
    $end            reduce using rule 3 (function_definition_list -> empty .)


state 5

    (6) function_definition -> type_specification . ID LPAREN formal_parameters RPAREN block
    (7) function_definition -> type_specification . DFS LPAREN formal_parameters RPAREN block
    (8) function_definition -> type_specification . BFS LPAREN formal_parameters RPAREN block

    ID              shift and go to state 19
    DFS             shift and go to state 20
    BFS             shift and go to state 21


state 6

    (16) type_specification -> INT .

    ID              reduce using rule 16 (type_specification -> INT .)
    DFS             reduce using rule 16 (type_specification -> INT .)
    BFS             reduce using rule 16 (type_specification -> INT .)
    RBRACE          reduce using rule 16 (type_specification -> INT .)


state 7

    (17) type_specification -> FLOAT .

    ID              reduce using rule 17 (type_specification -> FLOAT .)
    DFS             reduce using rule 17 (type_specification -> FLOAT .)
    BFS             reduce using rule 17 (type_specification -> FLOAT .)
    RBRACE          reduce using rule 17 (type_specification -> FLOAT .)


state 8

    (18) type_specification -> CHAR .

    ID              reduce using rule 18 (type_specification -> CHAR .)
    DFS             reduce using rule 18 (type_specification -> CHAR .)
    BFS             reduce using rule 18 (type_specification -> CHAR .)
    RBRACE          reduce using rule 18 (type_specification -> CHAR .)


state 9

    (19) type_specification -> BOOL .

    ID              reduce using rule 19 (type_specification -> BOOL .)
    DFS             reduce using rule 19 (type_specification -> BOOL .)
    BFS             reduce using rule 19 (type_specification -> BOOL .)
    RBRACE          reduce using rule 19 (type_specification -> BOOL .)


state 10

    (20) type_specification -> GRAPH .

    ID              reduce using rule 20 (type_specification -> GRAPH .)
    DFS             reduce using rule 20 (type_specification -> GRAPH .)
    BFS             reduce using rule 20 (type_specification -> GRAPH .)
    RBRACE          reduce using rule 20 (type_specification -> GRAPH .)


state 11

    (21) type_specification -> EDGE .

    ID              reduce using rule 21 (type_specification -> EDGE .)
    DFS             reduce using rule 21 (type_specification -> EDGE .)
    BFS             reduce using rule 21 (type_specification -> EDGE .)
    RBRACE          reduce using rule 21 (type_specification -> EDGE .)


state 12

    (22) type_specification -> NODE .

    ID              reduce using rule 22 (type_specification -> NODE .)
    DFS             reduce using rule 22 (type_specification -> NODE .)
    BFS             reduce using rule 22 (type_specification -> NODE .)
    RBRACE          reduce using rule 22 (type_specification -> NODE .)


state 13

    (23) type_specification -> VOID .

    ID              reduce using rule 23 (type_specification -> VOID .)
    DFS             reduce using rule 23 (type_specification -> VOID .)
    BFS             reduce using rule 23 (type_specification -> VOID .)
    RBRACE          reduce using rule 23 (type_specification -> VOID .)


state 14

    (1) program -> function_definition_list struct_definition_list .

    $end            reduce using rule 1 (program -> function_definition_list struct_definition_list .)


state 15

    (4) struct_definition_list -> struct_definition . struct_definition_list
    (4) struct_definition_list -> . struct_definition struct_definition_list
    (5) struct_definition_list -> . empty
    (9) struct_definition -> . STRUCT ID LBRACE type_specification RBRACE SEMICOLON
    (65) empty -> .

    STRUCT          shift and go to state 17
    $end            reduce using rule 65 (empty -> .)

    struct_definition              shift and go to state 15
    struct_definition_list         shift and go to state 22
    empty                          shift and go to state 16

state 16

    (5) struct_definition_list -> empty .

    $end            reduce using rule 5 (struct_definition_list -> empty .)


state 17

    (9) struct_definition -> STRUCT . ID LBRACE type_specification RBRACE SEMICOLON

    ID              shift and go to state 23


state 18

    (2) function_definition_list -> function_definition function_definition_list .

    STRUCT          reduce using rule 2 (function_definition_list -> function_definition function_definition_list .)
    $end            reduce using rule 2 (function_definition_list -> function_definition function_definition_list .)


state 19

    (6) function_definition -> type_specification ID . LPAREN formal_parameters RPAREN block

    LPAREN          shift and go to state 24


state 20

    (7) function_definition -> type_specification DFS . LPAREN formal_parameters RPAREN block

    LPAREN          shift and go to state 25


state 21

    (8) function_definition -> type_specification BFS . LPAREN formal_parameters RPAREN block

    LPAREN          shift and go to state 26


state 22

    (4) struct_definition_list -> struct_definition struct_definition_list .

    $end            reduce using rule 4 (struct_definition_list -> struct_definition struct_definition_list .)


state 23

    (9) struct_definition -> STRUCT ID . LBRACE type_specification RBRACE SEMICOLON

    LBRACE          shift and go to state 27


state 24

    (6) function_definition -> type_specification ID LPAREN . formal_parameters RPAREN block
    (10) formal_parameters -> . formal_parameter COMMA formal_parameters
    (11) formal_parameters -> . formal_parameter
    (12) formal_parameters -> . empty
    (13) formal_parameter -> . type_specification ID
    (14) formal_parameter -> . type_specification ID LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> . type_specification ID LBRACKET RBRACKET
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    RPAREN          reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    type_specification             shift and go to state 28
    formal_parameters              shift and go to state 29
    formal_parameter               shift and go to state 30
    empty                          shift and go to state 31

state 25

    (7) function_definition -> type_specification DFS LPAREN . formal_parameters RPAREN block
    (10) formal_parameters -> . formal_parameter COMMA formal_parameters
    (11) formal_parameters -> . formal_parameter
    (12) formal_parameters -> . empty
    (13) formal_parameter -> . type_specification ID
    (14) formal_parameter -> . type_specification ID LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> . type_specification ID LBRACKET RBRACKET
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    RPAREN          reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    type_specification             shift and go to state 28
    formal_parameters              shift and go to state 32
    formal_parameter               shift and go to state 30
    empty                          shift and go to state 31

state 26

    (8) function_definition -> type_specification BFS LPAREN . formal_parameters RPAREN block
    (10) formal_parameters -> . formal_parameter COMMA formal_parameters
    (11) formal_parameters -> . formal_parameter
    (12) formal_parameters -> . empty
    (13) formal_parameter -> . type_specification ID
    (14) formal_parameter -> . type_specification ID LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> . type_specification ID LBRACKET RBRACKET
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    RPAREN          reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    type_specification             shift and go to state 28
    formal_parameters              shift and go to state 33
    formal_parameter               shift and go to state 30
    empty                          shift and go to state 31

state 27

    (9) struct_definition -> STRUCT ID LBRACE . type_specification RBRACE SEMICOLON
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    type_specification             shift and go to state 34

state 28

    (13) formal_parameter -> type_specification . ID
    (14) formal_parameter -> type_specification . ID LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> type_specification . ID LBRACKET RBRACKET

    ID              shift and go to state 35


state 29

    (6) function_definition -> type_specification ID LPAREN formal_parameters . RPAREN block

    RPAREN          shift and go to state 36


state 30

    (10) formal_parameters -> formal_parameter . COMMA formal_parameters
    (11) formal_parameters -> formal_parameter .

    COMMA           shift and go to state 37
    RPAREN          reduce using rule 11 (formal_parameters -> formal_parameter .)


state 31

    (12) formal_parameters -> empty .

    RPAREN          reduce using rule 12 (formal_parameters -> empty .)


state 32

    (7) function_definition -> type_specification DFS LPAREN formal_parameters . RPAREN block

    RPAREN          shift and go to state 38


state 33

    (8) function_definition -> type_specification BFS LPAREN formal_parameters . RPAREN block

    RPAREN          shift and go to state 39


state 34

    (9) struct_definition -> STRUCT ID LBRACE type_specification . RBRACE SEMICOLON

    RBRACE          shift and go to state 40


state 35

    (13) formal_parameter -> type_specification ID .
    (14) formal_parameter -> type_specification ID . LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> type_specification ID . LBRACKET RBRACKET

    COMMA           reduce using rule 13 (formal_parameter -> type_specification ID .)
    RPAREN          reduce using rule 13 (formal_parameter -> type_specification ID .)
    LBRACKET        shift and go to state 41


state 36

    (6) function_definition -> type_specification ID LPAREN formal_parameters RPAREN . block
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 42

state 37

    (10) formal_parameters -> formal_parameter COMMA . formal_parameters
    (10) formal_parameters -> . formal_parameter COMMA formal_parameters
    (11) formal_parameters -> . formal_parameter
    (12) formal_parameters -> . empty
    (13) formal_parameter -> . type_specification ID
    (14) formal_parameter -> . type_specification ID LBRACKET INT_CONST RBRACKET
    (15) formal_parameter -> . type_specification ID LBRACKET RBRACKET
    (65) empty -> .
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    RPAREN          reduce using rule 65 (empty -> .)
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    formal_parameter               shift and go to state 30
    formal_parameters              shift and go to state 44
    empty                          shift and go to state 31
    type_specification             shift and go to state 28

state 38

    (7) function_definition -> type_specification DFS LPAREN formal_parameters RPAREN . block
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 45

state 39

    (8) function_definition -> type_specification BFS LPAREN formal_parameters RPAREN . block
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 46

state 40

    (9) struct_definition -> STRUCT ID LBRACE type_specification RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 47


state 41

    (14) formal_parameter -> type_specification ID LBRACKET . INT_CONST RBRACKET
    (15) formal_parameter -> type_specification ID LBRACKET . RBRACKET

    INT_CONST       shift and go to state 48
    RBRACKET        shift and go to state 49


state 42

    (6) function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .

    INT             reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    FLOAT           reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    CHAR            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    BOOL            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    GRAPH           reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    EDGE            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    NODE            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    VOID            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    STRUCT          reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)
    $end            reduce using rule 6 (function_definition -> type_specification ID LPAREN formal_parameters RPAREN block .)


state 43

    (24) block -> LBRACE . compound_statement RBRACE
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    compound_statement             shift and go to state 50
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable_declaration           shift and go to state 53
    special_function               shift and go to state 54
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    expression                     shift and go to state 73
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 44

    (10) formal_parameters -> formal_parameter COMMA formal_parameters .

    RPAREN          reduce using rule 10 (formal_parameters -> formal_parameter COMMA formal_parameters .)


state 45

    (7) function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .

    INT             reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    FLOAT           reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    CHAR            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    BOOL            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    GRAPH           reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    EDGE            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    NODE            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    VOID            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    STRUCT          reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)
    $end            reduce using rule 7 (function_definition -> type_specification DFS LPAREN formal_parameters RPAREN block .)


state 46

    (8) function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .

    INT             reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    FLOAT           reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    CHAR            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    BOOL            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    GRAPH           reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    EDGE            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    NODE            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    VOID            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    STRUCT          reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)
    $end            reduce using rule 8 (function_definition -> type_specification BFS LPAREN formal_parameters RPAREN block .)


state 47

    (9) struct_definition -> STRUCT ID LBRACE type_specification RBRACE SEMICOLON .

    STRUCT          reduce using rule 9 (struct_definition -> STRUCT ID LBRACE type_specification RBRACE SEMICOLON .)
    $end            reduce using rule 9 (struct_definition -> STRUCT ID LBRACE type_specification RBRACE SEMICOLON .)


state 48

    (14) formal_parameter -> type_specification ID LBRACKET INT_CONST . RBRACKET

    RBRACKET        shift and go to state 109


state 49

    (15) formal_parameter -> type_specification ID LBRACKET RBRACKET .

    COMMA           reduce using rule 15 (formal_parameter -> type_specification ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 15 (formal_parameter -> type_specification ID LBRACKET RBRACKET .)


state 50

    (24) block -> LBRACE compound_statement . RBRACE

    RBRACE          shift and go to state 110


state 51

    (25) compound_statement -> statement . compound_statement
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    statement                      shift and go to state 51
    compound_statement             shift and go to state 111
    empty                          shift and go to state 52
    variable_declaration           shift and go to state 53
    special_function               shift and go to state 54
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    expression                     shift and go to state 73
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 52

    (26) compound_statement -> empty .

    RBRACE          reduce using rule 26 (compound_statement -> empty .)


state 53

    (27) compound_statement -> variable_declaration . compound_statement
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    variable_declaration           shift and go to state 53
    compound_statement             shift and go to state 112
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    special_function               shift and go to state 54
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    expression                     shift and go to state 73
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 54

    (28) compound_statement -> special_function . compound_statement
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    special_function               shift and go to state 54
    compound_statement             shift and go to state 113
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable_declaration           shift and go to state 53
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    expression                     shift and go to state 73
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 55

    (33) statement -> expression_statement .

    RETURN          reduce using rule 33 (statement -> expression_statement .)
    IF              reduce using rule 33 (statement -> expression_statement .)
    FOR             reduce using rule 33 (statement -> expression_statement .)
    WHILE           reduce using rule 33 (statement -> expression_statement .)
    INT             reduce using rule 33 (statement -> expression_statement .)
    FLOAT           reduce using rule 33 (statement -> expression_statement .)
    CHAR            reduce using rule 33 (statement -> expression_statement .)
    BOOL            reduce using rule 33 (statement -> expression_statement .)
    GRAPH           reduce using rule 33 (statement -> expression_statement .)
    EDGE            reduce using rule 33 (statement -> expression_statement .)
    NODE            reduce using rule 33 (statement -> expression_statement .)
    VOID            reduce using rule 33 (statement -> expression_statement .)
    ADD_NODE        reduce using rule 33 (statement -> expression_statement .)
    ADD_EDGE        reduce using rule 33 (statement -> expression_statement .)
    REMOVE_NODE     reduce using rule 33 (statement -> expression_statement .)
    REMOVE_EDGE     reduce using rule 33 (statement -> expression_statement .)
    CHANGE_NODE_RGB reduce using rule 33 (statement -> expression_statement .)
    CHANGE_NODE_X   reduce using rule 33 (statement -> expression_statement .)
    CHANGE_NODE_Y   reduce using rule 33 (statement -> expression_statement .)
    CHANGE_EDGE_RGB reduce using rule 33 (statement -> expression_statement .)
    SHOW            reduce using rule 33 (statement -> expression_statement .)
    DFS             reduce using rule 33 (statement -> expression_statement .)
    MINUS           reduce using rule 33 (statement -> expression_statement .)
    PLUS            reduce using rule 33 (statement -> expression_statement .)
    ID              reduce using rule 33 (statement -> expression_statement .)
    INT_CONST       reduce using rule 33 (statement -> expression_statement .)
    LOGICAL_NOT     reduce using rule 33 (statement -> expression_statement .)
    TRUE            reduce using rule 33 (statement -> expression_statement .)
    FALSE           reduce using rule 33 (statement -> expression_statement .)
    LPAREN          reduce using rule 33 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 33 (statement -> expression_statement .)
    LENGTH          reduce using rule 33 (statement -> expression_statement .)
    RBRACE          reduce using rule 33 (statement -> expression_statement .)


state 56

    (34) statement -> return_statement .

    RETURN          reduce using rule 34 (statement -> return_statement .)
    IF              reduce using rule 34 (statement -> return_statement .)
    FOR             reduce using rule 34 (statement -> return_statement .)
    WHILE           reduce using rule 34 (statement -> return_statement .)
    INT             reduce using rule 34 (statement -> return_statement .)
    FLOAT           reduce using rule 34 (statement -> return_statement .)
    CHAR            reduce using rule 34 (statement -> return_statement .)
    BOOL            reduce using rule 34 (statement -> return_statement .)
    GRAPH           reduce using rule 34 (statement -> return_statement .)
    EDGE            reduce using rule 34 (statement -> return_statement .)
    NODE            reduce using rule 34 (statement -> return_statement .)
    VOID            reduce using rule 34 (statement -> return_statement .)
    ADD_NODE        reduce using rule 34 (statement -> return_statement .)
    ADD_EDGE        reduce using rule 34 (statement -> return_statement .)
    REMOVE_NODE     reduce using rule 34 (statement -> return_statement .)
    REMOVE_EDGE     reduce using rule 34 (statement -> return_statement .)
    CHANGE_NODE_RGB reduce using rule 34 (statement -> return_statement .)
    CHANGE_NODE_X   reduce using rule 34 (statement -> return_statement .)
    CHANGE_NODE_Y   reduce using rule 34 (statement -> return_statement .)
    CHANGE_EDGE_RGB reduce using rule 34 (statement -> return_statement .)
    SHOW            reduce using rule 34 (statement -> return_statement .)
    DFS             reduce using rule 34 (statement -> return_statement .)
    MINUS           reduce using rule 34 (statement -> return_statement .)
    PLUS            reduce using rule 34 (statement -> return_statement .)
    ID              reduce using rule 34 (statement -> return_statement .)
    INT_CONST       reduce using rule 34 (statement -> return_statement .)
    LOGICAL_NOT     reduce using rule 34 (statement -> return_statement .)
    TRUE            reduce using rule 34 (statement -> return_statement .)
    FALSE           reduce using rule 34 (statement -> return_statement .)
    LPAREN          reduce using rule 34 (statement -> return_statement .)
    FLOAT_CONST     reduce using rule 34 (statement -> return_statement .)
    LENGTH          reduce using rule 34 (statement -> return_statement .)
    RBRACE          reduce using rule 34 (statement -> return_statement .)


state 57

    (35) statement -> if_statement .

    RETURN          reduce using rule 35 (statement -> if_statement .)
    IF              reduce using rule 35 (statement -> if_statement .)
    FOR             reduce using rule 35 (statement -> if_statement .)
    WHILE           reduce using rule 35 (statement -> if_statement .)
    INT             reduce using rule 35 (statement -> if_statement .)
    FLOAT           reduce using rule 35 (statement -> if_statement .)
    CHAR            reduce using rule 35 (statement -> if_statement .)
    BOOL            reduce using rule 35 (statement -> if_statement .)
    GRAPH           reduce using rule 35 (statement -> if_statement .)
    EDGE            reduce using rule 35 (statement -> if_statement .)
    NODE            reduce using rule 35 (statement -> if_statement .)
    VOID            reduce using rule 35 (statement -> if_statement .)
    ADD_NODE        reduce using rule 35 (statement -> if_statement .)
    ADD_EDGE        reduce using rule 35 (statement -> if_statement .)
    REMOVE_NODE     reduce using rule 35 (statement -> if_statement .)
    REMOVE_EDGE     reduce using rule 35 (statement -> if_statement .)
    CHANGE_NODE_RGB reduce using rule 35 (statement -> if_statement .)
    CHANGE_NODE_X   reduce using rule 35 (statement -> if_statement .)
    CHANGE_NODE_Y   reduce using rule 35 (statement -> if_statement .)
    CHANGE_EDGE_RGB reduce using rule 35 (statement -> if_statement .)
    SHOW            reduce using rule 35 (statement -> if_statement .)
    DFS             reduce using rule 35 (statement -> if_statement .)
    MINUS           reduce using rule 35 (statement -> if_statement .)
    PLUS            reduce using rule 35 (statement -> if_statement .)
    ID              reduce using rule 35 (statement -> if_statement .)
    INT_CONST       reduce using rule 35 (statement -> if_statement .)
    LOGICAL_NOT     reduce using rule 35 (statement -> if_statement .)
    TRUE            reduce using rule 35 (statement -> if_statement .)
    FALSE           reduce using rule 35 (statement -> if_statement .)
    LPAREN          reduce using rule 35 (statement -> if_statement .)
    FLOAT_CONST     reduce using rule 35 (statement -> if_statement .)
    LENGTH          reduce using rule 35 (statement -> if_statement .)
    RBRACE          reduce using rule 35 (statement -> if_statement .)


state 58

    (36) statement -> for_statement .

    RETURN          reduce using rule 36 (statement -> for_statement .)
    IF              reduce using rule 36 (statement -> for_statement .)
    FOR             reduce using rule 36 (statement -> for_statement .)
    WHILE           reduce using rule 36 (statement -> for_statement .)
    INT             reduce using rule 36 (statement -> for_statement .)
    FLOAT           reduce using rule 36 (statement -> for_statement .)
    CHAR            reduce using rule 36 (statement -> for_statement .)
    BOOL            reduce using rule 36 (statement -> for_statement .)
    GRAPH           reduce using rule 36 (statement -> for_statement .)
    EDGE            reduce using rule 36 (statement -> for_statement .)
    NODE            reduce using rule 36 (statement -> for_statement .)
    VOID            reduce using rule 36 (statement -> for_statement .)
    ADD_NODE        reduce using rule 36 (statement -> for_statement .)
    ADD_EDGE        reduce using rule 36 (statement -> for_statement .)
    REMOVE_NODE     reduce using rule 36 (statement -> for_statement .)
    REMOVE_EDGE     reduce using rule 36 (statement -> for_statement .)
    CHANGE_NODE_RGB reduce using rule 36 (statement -> for_statement .)
    CHANGE_NODE_X   reduce using rule 36 (statement -> for_statement .)
    CHANGE_NODE_Y   reduce using rule 36 (statement -> for_statement .)
    CHANGE_EDGE_RGB reduce using rule 36 (statement -> for_statement .)
    SHOW            reduce using rule 36 (statement -> for_statement .)
    DFS             reduce using rule 36 (statement -> for_statement .)
    MINUS           reduce using rule 36 (statement -> for_statement .)
    PLUS            reduce using rule 36 (statement -> for_statement .)
    ID              reduce using rule 36 (statement -> for_statement .)
    INT_CONST       reduce using rule 36 (statement -> for_statement .)
    LOGICAL_NOT     reduce using rule 36 (statement -> for_statement .)
    TRUE            reduce using rule 36 (statement -> for_statement .)
    FALSE           reduce using rule 36 (statement -> for_statement .)
    LPAREN          reduce using rule 36 (statement -> for_statement .)
    FLOAT_CONST     reduce using rule 36 (statement -> for_statement .)
    LENGTH          reduce using rule 36 (statement -> for_statement .)
    RBRACE          reduce using rule 36 (statement -> for_statement .)


state 59

    (37) statement -> while_statement .

    RETURN          reduce using rule 37 (statement -> while_statement .)
    IF              reduce using rule 37 (statement -> while_statement .)
    FOR             reduce using rule 37 (statement -> while_statement .)
    WHILE           reduce using rule 37 (statement -> while_statement .)
    INT             reduce using rule 37 (statement -> while_statement .)
    FLOAT           reduce using rule 37 (statement -> while_statement .)
    CHAR            reduce using rule 37 (statement -> while_statement .)
    BOOL            reduce using rule 37 (statement -> while_statement .)
    GRAPH           reduce using rule 37 (statement -> while_statement .)
    EDGE            reduce using rule 37 (statement -> while_statement .)
    NODE            reduce using rule 37 (statement -> while_statement .)
    VOID            reduce using rule 37 (statement -> while_statement .)
    ADD_NODE        reduce using rule 37 (statement -> while_statement .)
    ADD_EDGE        reduce using rule 37 (statement -> while_statement .)
    REMOVE_NODE     reduce using rule 37 (statement -> while_statement .)
    REMOVE_EDGE     reduce using rule 37 (statement -> while_statement .)
    CHANGE_NODE_RGB reduce using rule 37 (statement -> while_statement .)
    CHANGE_NODE_X   reduce using rule 37 (statement -> while_statement .)
    CHANGE_NODE_Y   reduce using rule 37 (statement -> while_statement .)
    CHANGE_EDGE_RGB reduce using rule 37 (statement -> while_statement .)
    SHOW            reduce using rule 37 (statement -> while_statement .)
    DFS             reduce using rule 37 (statement -> while_statement .)
    MINUS           reduce using rule 37 (statement -> while_statement .)
    PLUS            reduce using rule 37 (statement -> while_statement .)
    ID              reduce using rule 37 (statement -> while_statement .)
    INT_CONST       reduce using rule 37 (statement -> while_statement .)
    LOGICAL_NOT     reduce using rule 37 (statement -> while_statement .)
    TRUE            reduce using rule 37 (statement -> while_statement .)
    FALSE           reduce using rule 37 (statement -> while_statement .)
    LPAREN          reduce using rule 37 (statement -> while_statement .)
    FLOAT_CONST     reduce using rule 37 (statement -> while_statement .)
    LENGTH          reduce using rule 37 (statement -> while_statement .)
    RBRACE          reduce using rule 37 (statement -> while_statement .)


state 60

    (29) variable_declaration -> type_specification . ID SEMICOLON
    (30) variable_declaration -> type_specification . ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> type_specification . ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> type_specification . ID LBRACKET INT_CONST RBRACKET SEMICOLON

    ID              shift and go to state 114


state 61

    (97) node_expression -> ID .
    (98) node_expression -> ID . DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (101) primary_expression -> ID .
    (102) primary_expression -> ID . args_expression
    (106) primary_expression -> ID . LBRACKET expression RBRACKET
    (111) args_expression -> . LPAREN RPAREN
    (112) args_expression -> . LPAREN assign_expression_list RPAREN

  ! reduce/reduce conflict for SEMICOLON resolved using rule 97 (node_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 97 (node_expression -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 97 (node_expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 97 (node_expression -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 97 (node_expression -> ID .)
    SEMICOLON       reduce using rule 97 (node_expression -> ID .)
    RPAREN          reduce using rule 97 (node_expression -> ID .)
    RBRACKET        reduce using rule 97 (node_expression -> ID .)
    COMMA           reduce using rule 97 (node_expression -> ID .)
    RBRACE          reduce using rule 97 (node_expression -> ID .)
    DOT             shift and go to state 115
    TIMES           reduce using rule 101 (primary_expression -> ID .)
    DIVIDE          reduce using rule 101 (primary_expression -> ID .)
    MODULO          reduce using rule 101 (primary_expression -> ID .)
    PLUS            reduce using rule 101 (primary_expression -> ID .)
    MINUS           reduce using rule 101 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 101 (primary_expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 101 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 101 (primary_expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 101 (primary_expression -> ID .)
    EQUAL           reduce using rule 101 (primary_expression -> ID .)
    LOGICAL_NOT     reduce using rule 101 (primary_expression -> ID .)
    ASSIGN          reduce using rule 101 (primary_expression -> ID .)
    LBRACKET        shift and go to state 116
    LPAREN          shift and go to state 118

  ! SEMICOLON       [ reduce using rule 101 (primary_expression -> ID .) ]
  ! RPAREN          [ reduce using rule 101 (primary_expression -> ID .) ]
  ! RBRACKET        [ reduce using rule 101 (primary_expression -> ID .) ]
  ! COMMA           [ reduce using rule 101 (primary_expression -> ID .) ]
  ! RBRACE          [ reduce using rule 101 (primary_expression -> ID .) ]

    args_expression                shift and go to state 117

state 62

    (99) node_expression -> INT_CONST .
    (116) num_expression -> INT_CONST .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 99 (node_expression -> INT_CONST .)
  ! reduce/reduce conflict for RPAREN resolved using rule 99 (node_expression -> INT_CONST .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 99 (node_expression -> INT_CONST .)
  ! reduce/reduce conflict for COMMA resolved using rule 99 (node_expression -> INT_CONST .)
  ! reduce/reduce conflict for RBRACE resolved using rule 99 (node_expression -> INT_CONST .)
    SEMICOLON       reduce using rule 99 (node_expression -> INT_CONST .)
    RPAREN          reduce using rule 99 (node_expression -> INT_CONST .)
    RBRACKET        reduce using rule 99 (node_expression -> INT_CONST .)
    COMMA           reduce using rule 99 (node_expression -> INT_CONST .)
    RBRACE          reduce using rule 99 (node_expression -> INT_CONST .)
    TIMES           reduce using rule 116 (num_expression -> INT_CONST .)
    DIVIDE          reduce using rule 116 (num_expression -> INT_CONST .)
    MODULO          reduce using rule 116 (num_expression -> INT_CONST .)
    PLUS            reduce using rule 116 (num_expression -> INT_CONST .)
    MINUS           reduce using rule 116 (num_expression -> INT_CONST .)
    LESS_THAN       reduce using rule 116 (num_expression -> INT_CONST .)
    LESS_THAN_EQUAL reduce using rule 116 (num_expression -> INT_CONST .)
    GREATER_THAN    reduce using rule 116 (num_expression -> INT_CONST .)
    GREATER_THAN_EQUAL reduce using rule 116 (num_expression -> INT_CONST .)
    EQUAL           reduce using rule 116 (num_expression -> INT_CONST .)
    LOGICAL_NOT     reduce using rule 116 (num_expression -> INT_CONST .)
    ASSIGN          reduce using rule 116 (num_expression -> INT_CONST .)

  ! SEMICOLON       [ reduce using rule 116 (num_expression -> INT_CONST .) ]
  ! RPAREN          [ reduce using rule 116 (num_expression -> INT_CONST .) ]
  ! RBRACKET        [ reduce using rule 116 (num_expression -> INT_CONST .) ]
  ! COMMA           [ reduce using rule 116 (num_expression -> INT_CONST .) ]
  ! RBRACE          [ reduce using rule 116 (num_expression -> INT_CONST .) ]


state 63

    (38) special_function -> add_node .

    RETURN          reduce using rule 38 (special_function -> add_node .)
    IF              reduce using rule 38 (special_function -> add_node .)
    FOR             reduce using rule 38 (special_function -> add_node .)
    WHILE           reduce using rule 38 (special_function -> add_node .)
    INT             reduce using rule 38 (special_function -> add_node .)
    FLOAT           reduce using rule 38 (special_function -> add_node .)
    CHAR            reduce using rule 38 (special_function -> add_node .)
    BOOL            reduce using rule 38 (special_function -> add_node .)
    GRAPH           reduce using rule 38 (special_function -> add_node .)
    EDGE            reduce using rule 38 (special_function -> add_node .)
    NODE            reduce using rule 38 (special_function -> add_node .)
    VOID            reduce using rule 38 (special_function -> add_node .)
    ADD_NODE        reduce using rule 38 (special_function -> add_node .)
    ADD_EDGE        reduce using rule 38 (special_function -> add_node .)
    REMOVE_NODE     reduce using rule 38 (special_function -> add_node .)
    REMOVE_EDGE     reduce using rule 38 (special_function -> add_node .)
    CHANGE_NODE_RGB reduce using rule 38 (special_function -> add_node .)
    CHANGE_NODE_X   reduce using rule 38 (special_function -> add_node .)
    CHANGE_NODE_Y   reduce using rule 38 (special_function -> add_node .)
    CHANGE_EDGE_RGB reduce using rule 38 (special_function -> add_node .)
    SHOW            reduce using rule 38 (special_function -> add_node .)
    DFS             reduce using rule 38 (special_function -> add_node .)
    MINUS           reduce using rule 38 (special_function -> add_node .)
    PLUS            reduce using rule 38 (special_function -> add_node .)
    ID              reduce using rule 38 (special_function -> add_node .)
    INT_CONST       reduce using rule 38 (special_function -> add_node .)
    LOGICAL_NOT     reduce using rule 38 (special_function -> add_node .)
    TRUE            reduce using rule 38 (special_function -> add_node .)
    FALSE           reduce using rule 38 (special_function -> add_node .)
    LPAREN          reduce using rule 38 (special_function -> add_node .)
    FLOAT_CONST     reduce using rule 38 (special_function -> add_node .)
    LENGTH          reduce using rule 38 (special_function -> add_node .)
    RBRACE          reduce using rule 38 (special_function -> add_node .)


state 64

    (39) special_function -> add_edge .

    RETURN          reduce using rule 39 (special_function -> add_edge .)
    IF              reduce using rule 39 (special_function -> add_edge .)
    FOR             reduce using rule 39 (special_function -> add_edge .)
    WHILE           reduce using rule 39 (special_function -> add_edge .)
    INT             reduce using rule 39 (special_function -> add_edge .)
    FLOAT           reduce using rule 39 (special_function -> add_edge .)
    CHAR            reduce using rule 39 (special_function -> add_edge .)
    BOOL            reduce using rule 39 (special_function -> add_edge .)
    GRAPH           reduce using rule 39 (special_function -> add_edge .)
    EDGE            reduce using rule 39 (special_function -> add_edge .)
    NODE            reduce using rule 39 (special_function -> add_edge .)
    VOID            reduce using rule 39 (special_function -> add_edge .)
    ADD_NODE        reduce using rule 39 (special_function -> add_edge .)
    ADD_EDGE        reduce using rule 39 (special_function -> add_edge .)
    REMOVE_NODE     reduce using rule 39 (special_function -> add_edge .)
    REMOVE_EDGE     reduce using rule 39 (special_function -> add_edge .)
    CHANGE_NODE_RGB reduce using rule 39 (special_function -> add_edge .)
    CHANGE_NODE_X   reduce using rule 39 (special_function -> add_edge .)
    CHANGE_NODE_Y   reduce using rule 39 (special_function -> add_edge .)
    CHANGE_EDGE_RGB reduce using rule 39 (special_function -> add_edge .)
    SHOW            reduce using rule 39 (special_function -> add_edge .)
    DFS             reduce using rule 39 (special_function -> add_edge .)
    MINUS           reduce using rule 39 (special_function -> add_edge .)
    PLUS            reduce using rule 39 (special_function -> add_edge .)
    ID              reduce using rule 39 (special_function -> add_edge .)
    INT_CONST       reduce using rule 39 (special_function -> add_edge .)
    LOGICAL_NOT     reduce using rule 39 (special_function -> add_edge .)
    TRUE            reduce using rule 39 (special_function -> add_edge .)
    FALSE           reduce using rule 39 (special_function -> add_edge .)
    LPAREN          reduce using rule 39 (special_function -> add_edge .)
    FLOAT_CONST     reduce using rule 39 (special_function -> add_edge .)
    LENGTH          reduce using rule 39 (special_function -> add_edge .)
    RBRACE          reduce using rule 39 (special_function -> add_edge .)


state 65

    (40) special_function -> remove_node .

    RETURN          reduce using rule 40 (special_function -> remove_node .)
    IF              reduce using rule 40 (special_function -> remove_node .)
    FOR             reduce using rule 40 (special_function -> remove_node .)
    WHILE           reduce using rule 40 (special_function -> remove_node .)
    INT             reduce using rule 40 (special_function -> remove_node .)
    FLOAT           reduce using rule 40 (special_function -> remove_node .)
    CHAR            reduce using rule 40 (special_function -> remove_node .)
    BOOL            reduce using rule 40 (special_function -> remove_node .)
    GRAPH           reduce using rule 40 (special_function -> remove_node .)
    EDGE            reduce using rule 40 (special_function -> remove_node .)
    NODE            reduce using rule 40 (special_function -> remove_node .)
    VOID            reduce using rule 40 (special_function -> remove_node .)
    ADD_NODE        reduce using rule 40 (special_function -> remove_node .)
    ADD_EDGE        reduce using rule 40 (special_function -> remove_node .)
    REMOVE_NODE     reduce using rule 40 (special_function -> remove_node .)
    REMOVE_EDGE     reduce using rule 40 (special_function -> remove_node .)
    CHANGE_NODE_RGB reduce using rule 40 (special_function -> remove_node .)
    CHANGE_NODE_X   reduce using rule 40 (special_function -> remove_node .)
    CHANGE_NODE_Y   reduce using rule 40 (special_function -> remove_node .)
    CHANGE_EDGE_RGB reduce using rule 40 (special_function -> remove_node .)
    SHOW            reduce using rule 40 (special_function -> remove_node .)
    DFS             reduce using rule 40 (special_function -> remove_node .)
    MINUS           reduce using rule 40 (special_function -> remove_node .)
    PLUS            reduce using rule 40 (special_function -> remove_node .)
    ID              reduce using rule 40 (special_function -> remove_node .)
    INT_CONST       reduce using rule 40 (special_function -> remove_node .)
    LOGICAL_NOT     reduce using rule 40 (special_function -> remove_node .)
    TRUE            reduce using rule 40 (special_function -> remove_node .)
    FALSE           reduce using rule 40 (special_function -> remove_node .)
    LPAREN          reduce using rule 40 (special_function -> remove_node .)
    FLOAT_CONST     reduce using rule 40 (special_function -> remove_node .)
    LENGTH          reduce using rule 40 (special_function -> remove_node .)
    RBRACE          reduce using rule 40 (special_function -> remove_node .)


state 66

    (41) special_function -> remove_edge .

    RETURN          reduce using rule 41 (special_function -> remove_edge .)
    IF              reduce using rule 41 (special_function -> remove_edge .)
    FOR             reduce using rule 41 (special_function -> remove_edge .)
    WHILE           reduce using rule 41 (special_function -> remove_edge .)
    INT             reduce using rule 41 (special_function -> remove_edge .)
    FLOAT           reduce using rule 41 (special_function -> remove_edge .)
    CHAR            reduce using rule 41 (special_function -> remove_edge .)
    BOOL            reduce using rule 41 (special_function -> remove_edge .)
    GRAPH           reduce using rule 41 (special_function -> remove_edge .)
    EDGE            reduce using rule 41 (special_function -> remove_edge .)
    NODE            reduce using rule 41 (special_function -> remove_edge .)
    VOID            reduce using rule 41 (special_function -> remove_edge .)
    ADD_NODE        reduce using rule 41 (special_function -> remove_edge .)
    ADD_EDGE        reduce using rule 41 (special_function -> remove_edge .)
    REMOVE_NODE     reduce using rule 41 (special_function -> remove_edge .)
    REMOVE_EDGE     reduce using rule 41 (special_function -> remove_edge .)
    CHANGE_NODE_RGB reduce using rule 41 (special_function -> remove_edge .)
    CHANGE_NODE_X   reduce using rule 41 (special_function -> remove_edge .)
    CHANGE_NODE_Y   reduce using rule 41 (special_function -> remove_edge .)
    CHANGE_EDGE_RGB reduce using rule 41 (special_function -> remove_edge .)
    SHOW            reduce using rule 41 (special_function -> remove_edge .)
    DFS             reduce using rule 41 (special_function -> remove_edge .)
    MINUS           reduce using rule 41 (special_function -> remove_edge .)
    PLUS            reduce using rule 41 (special_function -> remove_edge .)
    ID              reduce using rule 41 (special_function -> remove_edge .)
    INT_CONST       reduce using rule 41 (special_function -> remove_edge .)
    LOGICAL_NOT     reduce using rule 41 (special_function -> remove_edge .)
    TRUE            reduce using rule 41 (special_function -> remove_edge .)
    FALSE           reduce using rule 41 (special_function -> remove_edge .)
    LPAREN          reduce using rule 41 (special_function -> remove_edge .)
    FLOAT_CONST     reduce using rule 41 (special_function -> remove_edge .)
    LENGTH          reduce using rule 41 (special_function -> remove_edge .)
    RBRACE          reduce using rule 41 (special_function -> remove_edge .)


state 67

    (42) special_function -> change_node_rgb .

    RETURN          reduce using rule 42 (special_function -> change_node_rgb .)
    IF              reduce using rule 42 (special_function -> change_node_rgb .)
    FOR             reduce using rule 42 (special_function -> change_node_rgb .)
    WHILE           reduce using rule 42 (special_function -> change_node_rgb .)
    INT             reduce using rule 42 (special_function -> change_node_rgb .)
    FLOAT           reduce using rule 42 (special_function -> change_node_rgb .)
    CHAR            reduce using rule 42 (special_function -> change_node_rgb .)
    BOOL            reduce using rule 42 (special_function -> change_node_rgb .)
    GRAPH           reduce using rule 42 (special_function -> change_node_rgb .)
    EDGE            reduce using rule 42 (special_function -> change_node_rgb .)
    NODE            reduce using rule 42 (special_function -> change_node_rgb .)
    VOID            reduce using rule 42 (special_function -> change_node_rgb .)
    ADD_NODE        reduce using rule 42 (special_function -> change_node_rgb .)
    ADD_EDGE        reduce using rule 42 (special_function -> change_node_rgb .)
    REMOVE_NODE     reduce using rule 42 (special_function -> change_node_rgb .)
    REMOVE_EDGE     reduce using rule 42 (special_function -> change_node_rgb .)
    CHANGE_NODE_RGB reduce using rule 42 (special_function -> change_node_rgb .)
    CHANGE_NODE_X   reduce using rule 42 (special_function -> change_node_rgb .)
    CHANGE_NODE_Y   reduce using rule 42 (special_function -> change_node_rgb .)
    CHANGE_EDGE_RGB reduce using rule 42 (special_function -> change_node_rgb .)
    SHOW            reduce using rule 42 (special_function -> change_node_rgb .)
    DFS             reduce using rule 42 (special_function -> change_node_rgb .)
    MINUS           reduce using rule 42 (special_function -> change_node_rgb .)
    PLUS            reduce using rule 42 (special_function -> change_node_rgb .)
    ID              reduce using rule 42 (special_function -> change_node_rgb .)
    INT_CONST       reduce using rule 42 (special_function -> change_node_rgb .)
    LOGICAL_NOT     reduce using rule 42 (special_function -> change_node_rgb .)
    TRUE            reduce using rule 42 (special_function -> change_node_rgb .)
    FALSE           reduce using rule 42 (special_function -> change_node_rgb .)
    LPAREN          reduce using rule 42 (special_function -> change_node_rgb .)
    FLOAT_CONST     reduce using rule 42 (special_function -> change_node_rgb .)
    LENGTH          reduce using rule 42 (special_function -> change_node_rgb .)
    RBRACE          reduce using rule 42 (special_function -> change_node_rgb .)


state 68

    (43) special_function -> change_node_x .

    RETURN          reduce using rule 43 (special_function -> change_node_x .)
    IF              reduce using rule 43 (special_function -> change_node_x .)
    FOR             reduce using rule 43 (special_function -> change_node_x .)
    WHILE           reduce using rule 43 (special_function -> change_node_x .)
    INT             reduce using rule 43 (special_function -> change_node_x .)
    FLOAT           reduce using rule 43 (special_function -> change_node_x .)
    CHAR            reduce using rule 43 (special_function -> change_node_x .)
    BOOL            reduce using rule 43 (special_function -> change_node_x .)
    GRAPH           reduce using rule 43 (special_function -> change_node_x .)
    EDGE            reduce using rule 43 (special_function -> change_node_x .)
    NODE            reduce using rule 43 (special_function -> change_node_x .)
    VOID            reduce using rule 43 (special_function -> change_node_x .)
    ADD_NODE        reduce using rule 43 (special_function -> change_node_x .)
    ADD_EDGE        reduce using rule 43 (special_function -> change_node_x .)
    REMOVE_NODE     reduce using rule 43 (special_function -> change_node_x .)
    REMOVE_EDGE     reduce using rule 43 (special_function -> change_node_x .)
    CHANGE_NODE_RGB reduce using rule 43 (special_function -> change_node_x .)
    CHANGE_NODE_X   reduce using rule 43 (special_function -> change_node_x .)
    CHANGE_NODE_Y   reduce using rule 43 (special_function -> change_node_x .)
    CHANGE_EDGE_RGB reduce using rule 43 (special_function -> change_node_x .)
    SHOW            reduce using rule 43 (special_function -> change_node_x .)
    DFS             reduce using rule 43 (special_function -> change_node_x .)
    MINUS           reduce using rule 43 (special_function -> change_node_x .)
    PLUS            reduce using rule 43 (special_function -> change_node_x .)
    ID              reduce using rule 43 (special_function -> change_node_x .)
    INT_CONST       reduce using rule 43 (special_function -> change_node_x .)
    LOGICAL_NOT     reduce using rule 43 (special_function -> change_node_x .)
    TRUE            reduce using rule 43 (special_function -> change_node_x .)
    FALSE           reduce using rule 43 (special_function -> change_node_x .)
    LPAREN          reduce using rule 43 (special_function -> change_node_x .)
    FLOAT_CONST     reduce using rule 43 (special_function -> change_node_x .)
    LENGTH          reduce using rule 43 (special_function -> change_node_x .)
    RBRACE          reduce using rule 43 (special_function -> change_node_x .)


state 69

    (44) special_function -> change_node_y .

    RETURN          reduce using rule 44 (special_function -> change_node_y .)
    IF              reduce using rule 44 (special_function -> change_node_y .)
    FOR             reduce using rule 44 (special_function -> change_node_y .)
    WHILE           reduce using rule 44 (special_function -> change_node_y .)
    INT             reduce using rule 44 (special_function -> change_node_y .)
    FLOAT           reduce using rule 44 (special_function -> change_node_y .)
    CHAR            reduce using rule 44 (special_function -> change_node_y .)
    BOOL            reduce using rule 44 (special_function -> change_node_y .)
    GRAPH           reduce using rule 44 (special_function -> change_node_y .)
    EDGE            reduce using rule 44 (special_function -> change_node_y .)
    NODE            reduce using rule 44 (special_function -> change_node_y .)
    VOID            reduce using rule 44 (special_function -> change_node_y .)
    ADD_NODE        reduce using rule 44 (special_function -> change_node_y .)
    ADD_EDGE        reduce using rule 44 (special_function -> change_node_y .)
    REMOVE_NODE     reduce using rule 44 (special_function -> change_node_y .)
    REMOVE_EDGE     reduce using rule 44 (special_function -> change_node_y .)
    CHANGE_NODE_RGB reduce using rule 44 (special_function -> change_node_y .)
    CHANGE_NODE_X   reduce using rule 44 (special_function -> change_node_y .)
    CHANGE_NODE_Y   reduce using rule 44 (special_function -> change_node_y .)
    CHANGE_EDGE_RGB reduce using rule 44 (special_function -> change_node_y .)
    SHOW            reduce using rule 44 (special_function -> change_node_y .)
    DFS             reduce using rule 44 (special_function -> change_node_y .)
    MINUS           reduce using rule 44 (special_function -> change_node_y .)
    PLUS            reduce using rule 44 (special_function -> change_node_y .)
    ID              reduce using rule 44 (special_function -> change_node_y .)
    INT_CONST       reduce using rule 44 (special_function -> change_node_y .)
    LOGICAL_NOT     reduce using rule 44 (special_function -> change_node_y .)
    TRUE            reduce using rule 44 (special_function -> change_node_y .)
    FALSE           reduce using rule 44 (special_function -> change_node_y .)
    LPAREN          reduce using rule 44 (special_function -> change_node_y .)
    FLOAT_CONST     reduce using rule 44 (special_function -> change_node_y .)
    LENGTH          reduce using rule 44 (special_function -> change_node_y .)
    RBRACE          reduce using rule 44 (special_function -> change_node_y .)


state 70

    (45) special_function -> change_edge_rgb .

    RETURN          reduce using rule 45 (special_function -> change_edge_rgb .)
    IF              reduce using rule 45 (special_function -> change_edge_rgb .)
    FOR             reduce using rule 45 (special_function -> change_edge_rgb .)
    WHILE           reduce using rule 45 (special_function -> change_edge_rgb .)
    INT             reduce using rule 45 (special_function -> change_edge_rgb .)
    FLOAT           reduce using rule 45 (special_function -> change_edge_rgb .)
    CHAR            reduce using rule 45 (special_function -> change_edge_rgb .)
    BOOL            reduce using rule 45 (special_function -> change_edge_rgb .)
    GRAPH           reduce using rule 45 (special_function -> change_edge_rgb .)
    EDGE            reduce using rule 45 (special_function -> change_edge_rgb .)
    NODE            reduce using rule 45 (special_function -> change_edge_rgb .)
    VOID            reduce using rule 45 (special_function -> change_edge_rgb .)
    ADD_NODE        reduce using rule 45 (special_function -> change_edge_rgb .)
    ADD_EDGE        reduce using rule 45 (special_function -> change_edge_rgb .)
    REMOVE_NODE     reduce using rule 45 (special_function -> change_edge_rgb .)
    REMOVE_EDGE     reduce using rule 45 (special_function -> change_edge_rgb .)
    CHANGE_NODE_RGB reduce using rule 45 (special_function -> change_edge_rgb .)
    CHANGE_NODE_X   reduce using rule 45 (special_function -> change_edge_rgb .)
    CHANGE_NODE_Y   reduce using rule 45 (special_function -> change_edge_rgb .)
    CHANGE_EDGE_RGB reduce using rule 45 (special_function -> change_edge_rgb .)
    SHOW            reduce using rule 45 (special_function -> change_edge_rgb .)
    DFS             reduce using rule 45 (special_function -> change_edge_rgb .)
    MINUS           reduce using rule 45 (special_function -> change_edge_rgb .)
    PLUS            reduce using rule 45 (special_function -> change_edge_rgb .)
    ID              reduce using rule 45 (special_function -> change_edge_rgb .)
    INT_CONST       reduce using rule 45 (special_function -> change_edge_rgb .)
    LOGICAL_NOT     reduce using rule 45 (special_function -> change_edge_rgb .)
    TRUE            reduce using rule 45 (special_function -> change_edge_rgb .)
    FALSE           reduce using rule 45 (special_function -> change_edge_rgb .)
    LPAREN          reduce using rule 45 (special_function -> change_edge_rgb .)
    FLOAT_CONST     reduce using rule 45 (special_function -> change_edge_rgb .)
    LENGTH          reduce using rule 45 (special_function -> change_edge_rgb .)
    RBRACE          reduce using rule 45 (special_function -> change_edge_rgb .)


state 71

    (46) special_function -> show .

    RETURN          reduce using rule 46 (special_function -> show .)
    IF              reduce using rule 46 (special_function -> show .)
    FOR             reduce using rule 46 (special_function -> show .)
    WHILE           reduce using rule 46 (special_function -> show .)
    INT             reduce using rule 46 (special_function -> show .)
    FLOAT           reduce using rule 46 (special_function -> show .)
    CHAR            reduce using rule 46 (special_function -> show .)
    BOOL            reduce using rule 46 (special_function -> show .)
    GRAPH           reduce using rule 46 (special_function -> show .)
    EDGE            reduce using rule 46 (special_function -> show .)
    NODE            reduce using rule 46 (special_function -> show .)
    VOID            reduce using rule 46 (special_function -> show .)
    ADD_NODE        reduce using rule 46 (special_function -> show .)
    ADD_EDGE        reduce using rule 46 (special_function -> show .)
    REMOVE_NODE     reduce using rule 46 (special_function -> show .)
    REMOVE_EDGE     reduce using rule 46 (special_function -> show .)
    CHANGE_NODE_RGB reduce using rule 46 (special_function -> show .)
    CHANGE_NODE_X   reduce using rule 46 (special_function -> show .)
    CHANGE_NODE_Y   reduce using rule 46 (special_function -> show .)
    CHANGE_EDGE_RGB reduce using rule 46 (special_function -> show .)
    SHOW            reduce using rule 46 (special_function -> show .)
    DFS             reduce using rule 46 (special_function -> show .)
    MINUS           reduce using rule 46 (special_function -> show .)
    PLUS            reduce using rule 46 (special_function -> show .)
    ID              reduce using rule 46 (special_function -> show .)
    INT_CONST       reduce using rule 46 (special_function -> show .)
    LOGICAL_NOT     reduce using rule 46 (special_function -> show .)
    TRUE            reduce using rule 46 (special_function -> show .)
    FALSE           reduce using rule 46 (special_function -> show .)
    LPAREN          reduce using rule 46 (special_function -> show .)
    FLOAT_CONST     reduce using rule 46 (special_function -> show .)
    LENGTH          reduce using rule 46 (special_function -> show .)
    RBRACE          reduce using rule 46 (special_function -> show .)


state 72

    (47) special_function -> dfs .

    RETURN          reduce using rule 47 (special_function -> dfs .)
    IF              reduce using rule 47 (special_function -> dfs .)
    FOR             reduce using rule 47 (special_function -> dfs .)
    WHILE           reduce using rule 47 (special_function -> dfs .)
    INT             reduce using rule 47 (special_function -> dfs .)
    FLOAT           reduce using rule 47 (special_function -> dfs .)
    CHAR            reduce using rule 47 (special_function -> dfs .)
    BOOL            reduce using rule 47 (special_function -> dfs .)
    GRAPH           reduce using rule 47 (special_function -> dfs .)
    EDGE            reduce using rule 47 (special_function -> dfs .)
    NODE            reduce using rule 47 (special_function -> dfs .)
    VOID            reduce using rule 47 (special_function -> dfs .)
    ADD_NODE        reduce using rule 47 (special_function -> dfs .)
    ADD_EDGE        reduce using rule 47 (special_function -> dfs .)
    REMOVE_NODE     reduce using rule 47 (special_function -> dfs .)
    REMOVE_EDGE     reduce using rule 47 (special_function -> dfs .)
    CHANGE_NODE_RGB reduce using rule 47 (special_function -> dfs .)
    CHANGE_NODE_X   reduce using rule 47 (special_function -> dfs .)
    CHANGE_NODE_Y   reduce using rule 47 (special_function -> dfs .)
    CHANGE_EDGE_RGB reduce using rule 47 (special_function -> dfs .)
    SHOW            reduce using rule 47 (special_function -> dfs .)
    DFS             reduce using rule 47 (special_function -> dfs .)
    MINUS           reduce using rule 47 (special_function -> dfs .)
    PLUS            reduce using rule 47 (special_function -> dfs .)
    ID              reduce using rule 47 (special_function -> dfs .)
    INT_CONST       reduce using rule 47 (special_function -> dfs .)
    LOGICAL_NOT     reduce using rule 47 (special_function -> dfs .)
    TRUE            reduce using rule 47 (special_function -> dfs .)
    FALSE           reduce using rule 47 (special_function -> dfs .)
    LPAREN          reduce using rule 47 (special_function -> dfs .)
    FLOAT_CONST     reduce using rule 47 (special_function -> dfs .)
    LENGTH          reduce using rule 47 (special_function -> dfs .)
    RBRACE          reduce using rule 47 (special_function -> dfs .)


state 73

    (58) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 119


state 74

    (59) return_statement -> RETURN . expression_statement
    (58) expression_statement -> . expression SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression_statement           shift and go to state 120
    expression                     shift and go to state 73
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 75

    (60) if_statement -> IF . LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> IF . LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> IF . LPAREN expression RPAREN block ELSE if_statement

    LPAREN          shift and go to state 124


state 76

    (110) primary_expression -> LPAREN . expression RPAREN
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 125
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 77

    (63) for_statement -> FOR . LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    LPAREN          shift and go to state 126


state 78

    (64) while_statement -> WHILE . LPAREN expression RPAREN block

    LPAREN          shift and go to state 127


state 79

    (20) type_specification -> GRAPH .
    (109) primary_expression -> GRAPH .

    ID              reduce using rule 20 (type_specification -> GRAPH .)
    TIMES           reduce using rule 109 (primary_expression -> GRAPH .)
    DIVIDE          reduce using rule 109 (primary_expression -> GRAPH .)
    MODULO          reduce using rule 109 (primary_expression -> GRAPH .)
    PLUS            reduce using rule 109 (primary_expression -> GRAPH .)
    MINUS           reduce using rule 109 (primary_expression -> GRAPH .)
    LESS_THAN       reduce using rule 109 (primary_expression -> GRAPH .)
    LESS_THAN_EQUAL reduce using rule 109 (primary_expression -> GRAPH .)
    GREATER_THAN    reduce using rule 109 (primary_expression -> GRAPH .)
    GREATER_THAN_EQUAL reduce using rule 109 (primary_expression -> GRAPH .)
    EQUAL           reduce using rule 109 (primary_expression -> GRAPH .)
    LOGICAL_NOT     reduce using rule 109 (primary_expression -> GRAPH .)
    ASSIGN          reduce using rule 109 (primary_expression -> GRAPH .)
    SEMICOLON       reduce using rule 109 (primary_expression -> GRAPH .)


state 80

    (21) type_specification -> EDGE .
    (108) primary_expression -> EDGE .

    ID              reduce using rule 21 (type_specification -> EDGE .)
    TIMES           reduce using rule 108 (primary_expression -> EDGE .)
    DIVIDE          reduce using rule 108 (primary_expression -> EDGE .)
    MODULO          reduce using rule 108 (primary_expression -> EDGE .)
    PLUS            reduce using rule 108 (primary_expression -> EDGE .)
    MINUS           reduce using rule 108 (primary_expression -> EDGE .)
    LESS_THAN       reduce using rule 108 (primary_expression -> EDGE .)
    LESS_THAN_EQUAL reduce using rule 108 (primary_expression -> EDGE .)
    GREATER_THAN    reduce using rule 108 (primary_expression -> EDGE .)
    GREATER_THAN_EQUAL reduce using rule 108 (primary_expression -> EDGE .)
    EQUAL           reduce using rule 108 (primary_expression -> EDGE .)
    LOGICAL_NOT     reduce using rule 108 (primary_expression -> EDGE .)
    ASSIGN          reduce using rule 108 (primary_expression -> EDGE .)
    SEMICOLON       reduce using rule 108 (primary_expression -> EDGE .)


state 81

    (22) type_specification -> NODE .
    (107) primary_expression -> NODE .

    ID              reduce using rule 22 (type_specification -> NODE .)
    TIMES           reduce using rule 107 (primary_expression -> NODE .)
    DIVIDE          reduce using rule 107 (primary_expression -> NODE .)
    MODULO          reduce using rule 107 (primary_expression -> NODE .)
    PLUS            reduce using rule 107 (primary_expression -> NODE .)
    MINUS           reduce using rule 107 (primary_expression -> NODE .)
    LESS_THAN       reduce using rule 107 (primary_expression -> NODE .)
    LESS_THAN_EQUAL reduce using rule 107 (primary_expression -> NODE .)
    GREATER_THAN    reduce using rule 107 (primary_expression -> NODE .)
    GREATER_THAN_EQUAL reduce using rule 107 (primary_expression -> NODE .)
    EQUAL           reduce using rule 107 (primary_expression -> NODE .)
    LOGICAL_NOT     reduce using rule 107 (primary_expression -> NODE .)
    ASSIGN          reduce using rule 107 (primary_expression -> NODE .)
    SEMICOLON       reduce using rule 107 (primary_expression -> NODE .)


state 82

    (48) add_node -> ADD_NODE . LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LPAREN          shift and go to state 128


state 83

    (49) add_edge -> ADD_EDGE . LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LPAREN          shift and go to state 129


state 84

    (50) remove_node -> REMOVE_NODE . LPAREN expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 130


state 85

    (51) remove_edge -> REMOVE_EDGE . LPAREN expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 131


state 86

    (52) change_node_rgb -> CHANGE_NODE_RGB . LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LPAREN          shift and go to state 132


state 87

    (53) change_node_x -> CHANGE_NODE_X . LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 133


state 88

    (54) change_node_y -> CHANGE_NODE_Y . LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 134


state 89

    (55) change_edge_rgb -> CHANGE_EDGE_RGB . LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON

    LPAREN          shift and go to state 135


state 90

    (56) show -> SHOW . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 136


state 91

    (57) dfs -> DFS . LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON

    LPAREN          shift and go to state 137


state 92

    (67) expression -> node_expression .

    SEMICOLON       reduce using rule 67 (expression -> node_expression .)
    RPAREN          reduce using rule 67 (expression -> node_expression .)
    RBRACKET        reduce using rule 67 (expression -> node_expression .)
    COMMA           reduce using rule 67 (expression -> node_expression .)
    RBRACE          reduce using rule 67 (expression -> node_expression .)


state 93

    (66) expression -> assign_expression .

    SEMICOLON       reduce using rule 66 (expression -> assign_expression .)
    RPAREN          reduce using rule 66 (expression -> assign_expression .)
    RBRACKET        reduce using rule 66 (expression -> assign_expression .)
    COMMA           reduce using rule 66 (expression -> assign_expression .)
    RBRACE          reduce using rule 66 (expression -> assign_expression .)


state 94

    (68) assign_expression -> equality_expression . ASSIGN assign_expression
    (69) assign_expression -> equality_expression .

    ASSIGN          shift and go to state 138
    SEMICOLON       reduce using rule 69 (assign_expression -> equality_expression .)
    RPAREN          reduce using rule 69 (assign_expression -> equality_expression .)
    RBRACKET        reduce using rule 69 (assign_expression -> equality_expression .)
    COMMA           reduce using rule 69 (assign_expression -> equality_expression .)
    RBRACE          reduce using rule 69 (assign_expression -> equality_expression .)


state 95

    (70) assign_expression -> MINUS . MINUS primary_expression
    (77) unary_expression -> MINUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 139
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 140
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 96

    (75) unary_expression -> primary_expression .

    TIMES           reduce using rule 75 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 75 (unary_expression -> primary_expression .)
    MODULO          reduce using rule 75 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 75 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 75 (unary_expression -> primary_expression .)
    LESS_THAN       reduce using rule 75 (unary_expression -> primary_expression .)
    LESS_THAN_EQUAL reduce using rule 75 (unary_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 75 (unary_expression -> primary_expression .)
    GREATER_THAN_EQUAL reduce using rule 75 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 75 (unary_expression -> primary_expression .)
    LOGICAL_NOT     reduce using rule 75 (unary_expression -> primary_expression .)
    ASSIGN          reduce using rule 75 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 75 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 75 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 75 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 75 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 75 (unary_expression -> primary_expression .)


state 97

    (71) assign_expression -> PLUS . PLUS primary_expression
    (76) unary_expression -> PLUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 143
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 144
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 98

    (72) equality_expression -> relational_expression .
    (73) equality_expression -> relational_expression . EQUAL relational_expression
    (74) equality_expression -> relational_expression . LOGICAL_NOT ASSIGN relational_expression

    ASSIGN          reduce using rule 72 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 72 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 72 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 72 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 72 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 72 (equality_expression -> relational_expression .)
    EQUAL           shift and go to state 145
    LOGICAL_NOT     shift and go to state 146


state 99

    (78) unary_expression -> LOGICAL_NOT . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 147
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 100

    (79) relational_expression -> add_sub_expression . compare_expression
    (80) compare_expression -> . empty
    (81) compare_expression -> . LESS_THAN add_sub_expression compare_expression
    (82) compare_expression -> . LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (83) compare_expression -> . GREATER_THAN add_sub_expression compare_expression
    (84) compare_expression -> . GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (65) empty -> .

    LESS_THAN       shift and go to state 150
    LESS_THAN_EQUAL shift and go to state 151
    GREATER_THAN    shift and go to state 152
    GREATER_THAN_EQUAL shift and go to state 153
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    compare_expression             shift and go to state 148
    empty                          shift and go to state 149

state 101

    (85) add_sub_expression -> mul_div_mod_expression . add_sub_tail
    (86) add_sub_tail -> . PLUS mul_div_mod_expression add_sub_tail
    (87) add_sub_tail -> . MINUS mul_div_mod_expression add_sub_tail
    (88) add_sub_tail -> . empty
    (65) empty -> .

    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    add_sub_tail                   shift and go to state 154
    empty                          shift and go to state 157

state 102

    (89) mul_div_mod_expression -> unary_expression . mul_div_mod_tail
    (90) mul_div_mod_tail -> . TIMES unary_expression mul_div_mod_tail
    (91) mul_div_mod_tail -> . DIVIDE unary_expression mul_div_mod_tail
    (92) mul_div_mod_tail -> . MODULO unary_expression mul_div_mod_tail
    (93) mul_div_mod_tail -> . empty
    (65) empty -> .

    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160
    MODULO          shift and go to state 161
    PLUS            reduce using rule 65 (empty -> .)
    MINUS           reduce using rule 65 (empty -> .)
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    mul_div_mod_tail               shift and go to state 158
    empty                          shift and go to state 162

state 103

    (103) primary_expression -> TRUE .

    TIMES           reduce using rule 103 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 103 (primary_expression -> TRUE .)
    MODULO          reduce using rule 103 (primary_expression -> TRUE .)
    PLUS            reduce using rule 103 (primary_expression -> TRUE .)
    MINUS           reduce using rule 103 (primary_expression -> TRUE .)
    LESS_THAN       reduce using rule 103 (primary_expression -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 103 (primary_expression -> TRUE .)
    GREATER_THAN    reduce using rule 103 (primary_expression -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 103 (primary_expression -> TRUE .)
    EQUAL           reduce using rule 103 (primary_expression -> TRUE .)
    LOGICAL_NOT     reduce using rule 103 (primary_expression -> TRUE .)
    ASSIGN          reduce using rule 103 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 103 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 103 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 103 (primary_expression -> TRUE .)
    COMMA           reduce using rule 103 (primary_expression -> TRUE .)
    RBRACE          reduce using rule 103 (primary_expression -> TRUE .)


state 104

    (104) primary_expression -> FALSE .

    TIMES           reduce using rule 104 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 104 (primary_expression -> FALSE .)
    MODULO          reduce using rule 104 (primary_expression -> FALSE .)
    PLUS            reduce using rule 104 (primary_expression -> FALSE .)
    MINUS           reduce using rule 104 (primary_expression -> FALSE .)
    LESS_THAN       reduce using rule 104 (primary_expression -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 104 (primary_expression -> FALSE .)
    GREATER_THAN    reduce using rule 104 (primary_expression -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 104 (primary_expression -> FALSE .)
    EQUAL           reduce using rule 104 (primary_expression -> FALSE .)
    LOGICAL_NOT     reduce using rule 104 (primary_expression -> FALSE .)
    ASSIGN          reduce using rule 104 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 104 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 104 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 104 (primary_expression -> FALSE .)
    COMMA           reduce using rule 104 (primary_expression -> FALSE .)
    RBRACE          reduce using rule 104 (primary_expression -> FALSE .)


state 105

    (105) primary_expression -> num_expression .

    TIMES           reduce using rule 105 (primary_expression -> num_expression .)
    DIVIDE          reduce using rule 105 (primary_expression -> num_expression .)
    MODULO          reduce using rule 105 (primary_expression -> num_expression .)
    PLUS            reduce using rule 105 (primary_expression -> num_expression .)
    MINUS           reduce using rule 105 (primary_expression -> num_expression .)
    LESS_THAN       reduce using rule 105 (primary_expression -> num_expression .)
    LESS_THAN_EQUAL reduce using rule 105 (primary_expression -> num_expression .)
    GREATER_THAN    reduce using rule 105 (primary_expression -> num_expression .)
    GREATER_THAN_EQUAL reduce using rule 105 (primary_expression -> num_expression .)
    EQUAL           reduce using rule 105 (primary_expression -> num_expression .)
    LOGICAL_NOT     reduce using rule 105 (primary_expression -> num_expression .)
    ASSIGN          reduce using rule 105 (primary_expression -> num_expression .)
    SEMICOLON       reduce using rule 105 (primary_expression -> num_expression .)
    RPAREN          reduce using rule 105 (primary_expression -> num_expression .)
    RBRACKET        reduce using rule 105 (primary_expression -> num_expression .)
    COMMA           reduce using rule 105 (primary_expression -> num_expression .)
    RBRACE          reduce using rule 105 (primary_expression -> num_expression .)


state 106

    (117) num_expression -> FLOAT_CONST .

    TIMES           reduce using rule 117 (num_expression -> FLOAT_CONST .)
    DIVIDE          reduce using rule 117 (num_expression -> FLOAT_CONST .)
    MODULO          reduce using rule 117 (num_expression -> FLOAT_CONST .)
    PLUS            reduce using rule 117 (num_expression -> FLOAT_CONST .)
    MINUS           reduce using rule 117 (num_expression -> FLOAT_CONST .)
    LESS_THAN       reduce using rule 117 (num_expression -> FLOAT_CONST .)
    LESS_THAN_EQUAL reduce using rule 117 (num_expression -> FLOAT_CONST .)
    GREATER_THAN    reduce using rule 117 (num_expression -> FLOAT_CONST .)
    GREATER_THAN_EQUAL reduce using rule 117 (num_expression -> FLOAT_CONST .)
    EQUAL           reduce using rule 117 (num_expression -> FLOAT_CONST .)
    LOGICAL_NOT     reduce using rule 117 (num_expression -> FLOAT_CONST .)
    ASSIGN          reduce using rule 117 (num_expression -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 117 (num_expression -> FLOAT_CONST .)
    RPAREN          reduce using rule 117 (num_expression -> FLOAT_CONST .)
    RBRACKET        reduce using rule 117 (num_expression -> FLOAT_CONST .)
    COMMA           reduce using rule 117 (num_expression -> FLOAT_CONST .)
    RBRACE          reduce using rule 117 (num_expression -> FLOAT_CONST .)


state 107

    (118) num_expression -> function_num_expression .

    TIMES           reduce using rule 118 (num_expression -> function_num_expression .)
    DIVIDE          reduce using rule 118 (num_expression -> function_num_expression .)
    MODULO          reduce using rule 118 (num_expression -> function_num_expression .)
    PLUS            reduce using rule 118 (num_expression -> function_num_expression .)
    MINUS           reduce using rule 118 (num_expression -> function_num_expression .)
    LESS_THAN       reduce using rule 118 (num_expression -> function_num_expression .)
    LESS_THAN_EQUAL reduce using rule 118 (num_expression -> function_num_expression .)
    GREATER_THAN    reduce using rule 118 (num_expression -> function_num_expression .)
    GREATER_THAN_EQUAL reduce using rule 118 (num_expression -> function_num_expression .)
    EQUAL           reduce using rule 118 (num_expression -> function_num_expression .)
    LOGICAL_NOT     reduce using rule 118 (num_expression -> function_num_expression .)
    ASSIGN          reduce using rule 118 (num_expression -> function_num_expression .)
    SEMICOLON       reduce using rule 118 (num_expression -> function_num_expression .)
    RPAREN          reduce using rule 118 (num_expression -> function_num_expression .)
    RBRACKET        reduce using rule 118 (num_expression -> function_num_expression .)
    COMMA           reduce using rule 118 (num_expression -> function_num_expression .)
    RBRACE          reduce using rule 118 (num_expression -> function_num_expression .)


state 108

    (119) function_num_expression -> LENGTH . LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    LPAREN          shift and go to state 163


state 109

    (14) formal_parameter -> type_specification ID LBRACKET INT_CONST RBRACKET .

    COMMA           reduce using rule 14 (formal_parameter -> type_specification ID LBRACKET INT_CONST RBRACKET .)
    RPAREN          reduce using rule 14 (formal_parameter -> type_specification ID LBRACKET INT_CONST RBRACKET .)


state 110

    (24) block -> LBRACE compound_statement RBRACE .

    INT             reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    FLOAT           reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    CHAR            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    BOOL            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    GRAPH           reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    EDGE            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    NODE            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    VOID            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    STRUCT          reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    $end            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    RETURN          reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    IF              reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    FOR             reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    WHILE           reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    ADD_NODE        reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    ADD_EDGE        reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    REMOVE_NODE     reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    REMOVE_EDGE     reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    CHANGE_NODE_RGB reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    CHANGE_NODE_X   reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    CHANGE_NODE_Y   reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    CHANGE_EDGE_RGB reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    SHOW            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    DFS             reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    MINUS           reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    PLUS            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    ID              reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    INT_CONST       reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    LOGICAL_NOT     reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    TRUE            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    FALSE           reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    LPAREN          reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    FLOAT_CONST     reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    LENGTH          reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)
    RBRACE          reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)


state 111

    (25) compound_statement -> statement compound_statement .

    RBRACE          reduce using rule 25 (compound_statement -> statement compound_statement .)


state 112

    (27) compound_statement -> variable_declaration compound_statement .

    RBRACE          reduce using rule 27 (compound_statement -> variable_declaration compound_statement .)


state 113

    (28) compound_statement -> special_function compound_statement .

    RBRACE          reduce using rule 28 (compound_statement -> special_function compound_statement .)


state 114

    (29) variable_declaration -> type_specification ID . SEMICOLON
    (30) variable_declaration -> type_specification ID . ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> type_specification ID . COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> type_specification ID . LBRACKET INT_CONST RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 164
    ASSIGN          shift and go to state 165
    COMMA           shift and go to state 166
    LBRACKET        shift and go to state 167


state 115

    (98) node_expression -> ID DOT . ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET

    ADJ             shift and go to state 168


state 116

    (106) primary_expression -> ID LBRACKET . expression RBRACKET
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 169
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 117

    (102) primary_expression -> ID args_expression .

    TIMES           reduce using rule 102 (primary_expression -> ID args_expression .)
    DIVIDE          reduce using rule 102 (primary_expression -> ID args_expression .)
    MODULO          reduce using rule 102 (primary_expression -> ID args_expression .)
    PLUS            reduce using rule 102 (primary_expression -> ID args_expression .)
    MINUS           reduce using rule 102 (primary_expression -> ID args_expression .)
    LESS_THAN       reduce using rule 102 (primary_expression -> ID args_expression .)
    LESS_THAN_EQUAL reduce using rule 102 (primary_expression -> ID args_expression .)
    GREATER_THAN    reduce using rule 102 (primary_expression -> ID args_expression .)
    GREATER_THAN_EQUAL reduce using rule 102 (primary_expression -> ID args_expression .)
    EQUAL           reduce using rule 102 (primary_expression -> ID args_expression .)
    LOGICAL_NOT     reduce using rule 102 (primary_expression -> ID args_expression .)
    ASSIGN          reduce using rule 102 (primary_expression -> ID args_expression .)
    SEMICOLON       reduce using rule 102 (primary_expression -> ID args_expression .)
    RPAREN          reduce using rule 102 (primary_expression -> ID args_expression .)
    RBRACKET        reduce using rule 102 (primary_expression -> ID args_expression .)
    COMMA           reduce using rule 102 (primary_expression -> ID args_expression .)
    RBRACE          reduce using rule 102 (primary_expression -> ID args_expression .)


state 118

    (111) args_expression -> LPAREN . RPAREN
    (112) args_expression -> LPAREN . assign_expression_list RPAREN
    (113) assign_expression_list -> . empty
    (114) assign_expression_list -> . assign_expression
    (115) assign_expression_list -> . assign_expression COMMA assign_expression_list
    (65) empty -> .
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 170
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

  ! RPAREN          [ reduce using rule 65 (empty -> .) ]

    assign_expression_list         shift and go to state 171
    empty                          shift and go to state 172
    assign_expression              shift and go to state 173
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 119

    (58) expression_statement -> expression SEMICOLON .

    RETURN          reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    BOOL            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    GRAPH           reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    EDGE            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    NODE            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    VOID            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    ADD_NODE        reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    ADD_EDGE        reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    REMOVE_NODE     reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    REMOVE_EDGE     reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    SHOW            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    DFS             reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    ID              reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    INT_CONST       reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    LOGICAL_NOT     reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    LENGTH          reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 58 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 58 (expression_statement -> expression SEMICOLON .)


state 120

    (59) return_statement -> RETURN expression_statement .

    RETURN          reduce using rule 59 (return_statement -> RETURN expression_statement .)
    IF              reduce using rule 59 (return_statement -> RETURN expression_statement .)
    FOR             reduce using rule 59 (return_statement -> RETURN expression_statement .)
    WHILE           reduce using rule 59 (return_statement -> RETURN expression_statement .)
    INT             reduce using rule 59 (return_statement -> RETURN expression_statement .)
    FLOAT           reduce using rule 59 (return_statement -> RETURN expression_statement .)
    CHAR            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    BOOL            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    GRAPH           reduce using rule 59 (return_statement -> RETURN expression_statement .)
    EDGE            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    NODE            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    VOID            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    ADD_NODE        reduce using rule 59 (return_statement -> RETURN expression_statement .)
    ADD_EDGE        reduce using rule 59 (return_statement -> RETURN expression_statement .)
    REMOVE_NODE     reduce using rule 59 (return_statement -> RETURN expression_statement .)
    REMOVE_EDGE     reduce using rule 59 (return_statement -> RETURN expression_statement .)
    CHANGE_NODE_RGB reduce using rule 59 (return_statement -> RETURN expression_statement .)
    CHANGE_NODE_X   reduce using rule 59 (return_statement -> RETURN expression_statement .)
    CHANGE_NODE_Y   reduce using rule 59 (return_statement -> RETURN expression_statement .)
    CHANGE_EDGE_RGB reduce using rule 59 (return_statement -> RETURN expression_statement .)
    SHOW            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    DFS             reduce using rule 59 (return_statement -> RETURN expression_statement .)
    MINUS           reduce using rule 59 (return_statement -> RETURN expression_statement .)
    PLUS            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    ID              reduce using rule 59 (return_statement -> RETURN expression_statement .)
    INT_CONST       reduce using rule 59 (return_statement -> RETURN expression_statement .)
    LOGICAL_NOT     reduce using rule 59 (return_statement -> RETURN expression_statement .)
    TRUE            reduce using rule 59 (return_statement -> RETURN expression_statement .)
    FALSE           reduce using rule 59 (return_statement -> RETURN expression_statement .)
    LPAREN          reduce using rule 59 (return_statement -> RETURN expression_statement .)
    FLOAT_CONST     reduce using rule 59 (return_statement -> RETURN expression_statement .)
    LENGTH          reduce using rule 59 (return_statement -> RETURN expression_statement .)
    RBRACE          reduce using rule 59 (return_statement -> RETURN expression_statement .)


state 121

    (107) primary_expression -> NODE .

    TIMES           reduce using rule 107 (primary_expression -> NODE .)
    DIVIDE          reduce using rule 107 (primary_expression -> NODE .)
    MODULO          reduce using rule 107 (primary_expression -> NODE .)
    PLUS            reduce using rule 107 (primary_expression -> NODE .)
    MINUS           reduce using rule 107 (primary_expression -> NODE .)
    LESS_THAN       reduce using rule 107 (primary_expression -> NODE .)
    LESS_THAN_EQUAL reduce using rule 107 (primary_expression -> NODE .)
    GREATER_THAN    reduce using rule 107 (primary_expression -> NODE .)
    GREATER_THAN_EQUAL reduce using rule 107 (primary_expression -> NODE .)
    EQUAL           reduce using rule 107 (primary_expression -> NODE .)
    LOGICAL_NOT     reduce using rule 107 (primary_expression -> NODE .)
    ASSIGN          reduce using rule 107 (primary_expression -> NODE .)
    SEMICOLON       reduce using rule 107 (primary_expression -> NODE .)
    RPAREN          reduce using rule 107 (primary_expression -> NODE .)
    RBRACKET        reduce using rule 107 (primary_expression -> NODE .)
    COMMA           reduce using rule 107 (primary_expression -> NODE .)
    RBRACE          reduce using rule 107 (primary_expression -> NODE .)


state 122

    (108) primary_expression -> EDGE .

    TIMES           reduce using rule 108 (primary_expression -> EDGE .)
    DIVIDE          reduce using rule 108 (primary_expression -> EDGE .)
    MODULO          reduce using rule 108 (primary_expression -> EDGE .)
    PLUS            reduce using rule 108 (primary_expression -> EDGE .)
    MINUS           reduce using rule 108 (primary_expression -> EDGE .)
    LESS_THAN       reduce using rule 108 (primary_expression -> EDGE .)
    LESS_THAN_EQUAL reduce using rule 108 (primary_expression -> EDGE .)
    GREATER_THAN    reduce using rule 108 (primary_expression -> EDGE .)
    GREATER_THAN_EQUAL reduce using rule 108 (primary_expression -> EDGE .)
    EQUAL           reduce using rule 108 (primary_expression -> EDGE .)
    LOGICAL_NOT     reduce using rule 108 (primary_expression -> EDGE .)
    ASSIGN          reduce using rule 108 (primary_expression -> EDGE .)
    SEMICOLON       reduce using rule 108 (primary_expression -> EDGE .)
    RPAREN          reduce using rule 108 (primary_expression -> EDGE .)
    RBRACKET        reduce using rule 108 (primary_expression -> EDGE .)
    COMMA           reduce using rule 108 (primary_expression -> EDGE .)
    RBRACE          reduce using rule 108 (primary_expression -> EDGE .)


state 123

    (109) primary_expression -> GRAPH .

    TIMES           reduce using rule 109 (primary_expression -> GRAPH .)
    DIVIDE          reduce using rule 109 (primary_expression -> GRAPH .)
    MODULO          reduce using rule 109 (primary_expression -> GRAPH .)
    PLUS            reduce using rule 109 (primary_expression -> GRAPH .)
    MINUS           reduce using rule 109 (primary_expression -> GRAPH .)
    LESS_THAN       reduce using rule 109 (primary_expression -> GRAPH .)
    LESS_THAN_EQUAL reduce using rule 109 (primary_expression -> GRAPH .)
    GREATER_THAN    reduce using rule 109 (primary_expression -> GRAPH .)
    GREATER_THAN_EQUAL reduce using rule 109 (primary_expression -> GRAPH .)
    EQUAL           reduce using rule 109 (primary_expression -> GRAPH .)
    LOGICAL_NOT     reduce using rule 109 (primary_expression -> GRAPH .)
    ASSIGN          reduce using rule 109 (primary_expression -> GRAPH .)
    SEMICOLON       reduce using rule 109 (primary_expression -> GRAPH .)
    RPAREN          reduce using rule 109 (primary_expression -> GRAPH .)
    RBRACKET        reduce using rule 109 (primary_expression -> GRAPH .)
    COMMA           reduce using rule 109 (primary_expression -> GRAPH .)
    RBRACE          reduce using rule 109 (primary_expression -> GRAPH .)


state 124

    (60) if_statement -> IF LPAREN . expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> IF LPAREN . expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> IF LPAREN . expression RPAREN block ELSE if_statement
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 174
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 125

    (110) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 175


state 126

    (63) for_statement -> FOR LPAREN . INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    INT             shift and go to state 176


state 127

    (64) while_statement -> WHILE LPAREN . expression RPAREN block
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 177
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 128

    (48) add_node -> ADD_NODE LPAREN . expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 178
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 129

    (49) add_edge -> ADD_EDGE LPAREN . expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 179
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 130

    (50) remove_node -> REMOVE_NODE LPAREN . expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 180
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 131

    (51) remove_edge -> REMOVE_EDGE LPAREN . expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 181
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 132

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN . expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 182
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 133

    (53) change_node_x -> CHANGE_NODE_X LPAREN . expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 183
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 134

    (54) change_node_y -> CHANGE_NODE_Y LPAREN . expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 184
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 135

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN . expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 185
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 136

    (56) show -> SHOW LPAREN . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 186
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 137

    (57) dfs -> DFS LPAREN . ID COMMA node_expression COMMA ID RPAREN SEMICOLON

    ID              shift and go to state 187


state 138

    (68) assign_expression -> equality_expression ASSIGN . assign_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    equality_expression            shift and go to state 94
    assign_expression              shift and go to state 188
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 139

    (70) assign_expression -> MINUS MINUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 189
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 140

    (77) unary_expression -> MINUS primary_expression .

    TIMES           reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    DIVIDE          reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    MODULO          reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    PLUS            reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    MINUS           reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    LESS_THAN       reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    LESS_THAN_EQUAL reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    GREATER_THAN    reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    GREATER_THAN_EQUAL reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    EQUAL           reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    LOGICAL_NOT     reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    ASSIGN          reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    SEMICOLON       reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    RPAREN          reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    RBRACKET        reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    COMMA           reduce using rule 77 (unary_expression -> MINUS primary_expression .)
    RBRACE          reduce using rule 77 (unary_expression -> MINUS primary_expression .)


state 141

    (101) primary_expression -> ID .
    (102) primary_expression -> ID . args_expression
    (106) primary_expression -> ID . LBRACKET expression RBRACKET
    (111) args_expression -> . LPAREN RPAREN
    (112) args_expression -> . LPAREN assign_expression_list RPAREN

    TIMES           reduce using rule 101 (primary_expression -> ID .)
    DIVIDE          reduce using rule 101 (primary_expression -> ID .)
    MODULO          reduce using rule 101 (primary_expression -> ID .)
    PLUS            reduce using rule 101 (primary_expression -> ID .)
    MINUS           reduce using rule 101 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 101 (primary_expression -> ID .)
    LESS_THAN_EQUAL reduce using rule 101 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 101 (primary_expression -> ID .)
    GREATER_THAN_EQUAL reduce using rule 101 (primary_expression -> ID .)
    EQUAL           reduce using rule 101 (primary_expression -> ID .)
    LOGICAL_NOT     reduce using rule 101 (primary_expression -> ID .)
    ASSIGN          reduce using rule 101 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 101 (primary_expression -> ID .)
    RPAREN          reduce using rule 101 (primary_expression -> ID .)
    RBRACKET        reduce using rule 101 (primary_expression -> ID .)
    COMMA           reduce using rule 101 (primary_expression -> ID .)
    RBRACE          reduce using rule 101 (primary_expression -> ID .)
    LBRACKET        shift and go to state 116
    LPAREN          shift and go to state 118

    args_expression                shift and go to state 117

state 142

    (116) num_expression -> INT_CONST .

    TIMES           reduce using rule 116 (num_expression -> INT_CONST .)
    DIVIDE          reduce using rule 116 (num_expression -> INT_CONST .)
    MODULO          reduce using rule 116 (num_expression -> INT_CONST .)
    PLUS            reduce using rule 116 (num_expression -> INT_CONST .)
    MINUS           reduce using rule 116 (num_expression -> INT_CONST .)
    LESS_THAN       reduce using rule 116 (num_expression -> INT_CONST .)
    LESS_THAN_EQUAL reduce using rule 116 (num_expression -> INT_CONST .)
    GREATER_THAN    reduce using rule 116 (num_expression -> INT_CONST .)
    GREATER_THAN_EQUAL reduce using rule 116 (num_expression -> INT_CONST .)
    EQUAL           reduce using rule 116 (num_expression -> INT_CONST .)
    LOGICAL_NOT     reduce using rule 116 (num_expression -> INT_CONST .)
    ASSIGN          reduce using rule 116 (num_expression -> INT_CONST .)
    SEMICOLON       reduce using rule 116 (num_expression -> INT_CONST .)
    RPAREN          reduce using rule 116 (num_expression -> INT_CONST .)
    RBRACKET        reduce using rule 116 (num_expression -> INT_CONST .)
    COMMA           reduce using rule 116 (num_expression -> INT_CONST .)
    RBRACE          reduce using rule 116 (num_expression -> INT_CONST .)


state 143

    (71) assign_expression -> PLUS PLUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 190
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 144

    (76) unary_expression -> PLUS primary_expression .

    TIMES           reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    DIVIDE          reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    MODULO          reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    PLUS            reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    MINUS           reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    LESS_THAN       reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    LESS_THAN_EQUAL reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    GREATER_THAN    reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    GREATER_THAN_EQUAL reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    EQUAL           reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    LOGICAL_NOT     reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    ASSIGN          reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    SEMICOLON       reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    RPAREN          reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    RBRACKET        reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    COMMA           reduce using rule 76 (unary_expression -> PLUS primary_expression .)
    RBRACE          reduce using rule 76 (unary_expression -> PLUS primary_expression .)


state 145

    (73) equality_expression -> relational_expression EQUAL . relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    relational_expression          shift and go to state 191
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 146

    (74) equality_expression -> relational_expression LOGICAL_NOT . ASSIGN relational_expression

    ASSIGN          shift and go to state 194


state 147

    (78) unary_expression -> LOGICAL_NOT primary_expression .

    TIMES           reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    DIVIDE          reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    MODULO          reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    PLUS            reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    MINUS           reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    LESS_THAN       reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    LESS_THAN_EQUAL reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    GREATER_THAN    reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    GREATER_THAN_EQUAL reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    EQUAL           reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    LOGICAL_NOT     reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    ASSIGN          reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    SEMICOLON       reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    RPAREN          reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    RBRACKET        reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    COMMA           reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)
    RBRACE          reduce using rule 78 (unary_expression -> LOGICAL_NOT primary_expression .)


state 148

    (79) relational_expression -> add_sub_expression compare_expression .

    EQUAL           reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    LOGICAL_NOT     reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    ASSIGN          reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    SEMICOLON       reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    RPAREN          reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    RBRACKET        reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    COMMA           reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)
    RBRACE          reduce using rule 79 (relational_expression -> add_sub_expression compare_expression .)


state 149

    (80) compare_expression -> empty .

    EQUAL           reduce using rule 80 (compare_expression -> empty .)
    LOGICAL_NOT     reduce using rule 80 (compare_expression -> empty .)
    ASSIGN          reduce using rule 80 (compare_expression -> empty .)
    SEMICOLON       reduce using rule 80 (compare_expression -> empty .)
    RPAREN          reduce using rule 80 (compare_expression -> empty .)
    RBRACKET        reduce using rule 80 (compare_expression -> empty .)
    COMMA           reduce using rule 80 (compare_expression -> empty .)
    RBRACE          reduce using rule 80 (compare_expression -> empty .)


state 150

    (81) compare_expression -> LESS_THAN . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    add_sub_expression             shift and go to state 195
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 151

    (82) compare_expression -> LESS_THAN_EQUAL . ASSIGN add_sub_expression compare_expression

    ASSIGN          shift and go to state 196


state 152

    (83) compare_expression -> GREATER_THAN . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    add_sub_expression             shift and go to state 197
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 153

    (84) compare_expression -> GREATER_THAN_EQUAL . ASSIGN add_sub_expression compare_expression

    ASSIGN          shift and go to state 198


state 154

    (85) add_sub_expression -> mul_div_mod_expression add_sub_tail .

    LESS_THAN       reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    LESS_THAN_EQUAL reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    GREATER_THAN    reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    GREATER_THAN_EQUAL reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    EQUAL           reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    LOGICAL_NOT     reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    ASSIGN          reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    SEMICOLON       reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    RPAREN          reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    RBRACKET        reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    COMMA           reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)
    RBRACE          reduce using rule 85 (add_sub_expression -> mul_div_mod_expression add_sub_tail .)


state 155

    (86) add_sub_tail -> PLUS . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    mul_div_mod_expression         shift and go to state 199
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 156

    (87) add_sub_tail -> MINUS . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    mul_div_mod_expression         shift and go to state 200
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 157

    (88) add_sub_tail -> empty .

    LESS_THAN       reduce using rule 88 (add_sub_tail -> empty .)
    LESS_THAN_EQUAL reduce using rule 88 (add_sub_tail -> empty .)
    GREATER_THAN    reduce using rule 88 (add_sub_tail -> empty .)
    GREATER_THAN_EQUAL reduce using rule 88 (add_sub_tail -> empty .)
    EQUAL           reduce using rule 88 (add_sub_tail -> empty .)
    LOGICAL_NOT     reduce using rule 88 (add_sub_tail -> empty .)
    ASSIGN          reduce using rule 88 (add_sub_tail -> empty .)
    SEMICOLON       reduce using rule 88 (add_sub_tail -> empty .)
    RPAREN          reduce using rule 88 (add_sub_tail -> empty .)
    RBRACKET        reduce using rule 88 (add_sub_tail -> empty .)
    COMMA           reduce using rule 88 (add_sub_tail -> empty .)
    RBRACE          reduce using rule 88 (add_sub_tail -> empty .)


state 158

    (89) mul_div_mod_expression -> unary_expression mul_div_mod_tail .

    PLUS            reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    MINUS           reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    LESS_THAN       reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    LESS_THAN_EQUAL reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    GREATER_THAN    reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    GREATER_THAN_EQUAL reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    EQUAL           reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    LOGICAL_NOT     reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    ASSIGN          reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    SEMICOLON       reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    RPAREN          reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    RBRACKET        reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    COMMA           reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)
    RBRACE          reduce using rule 89 (mul_div_mod_expression -> unary_expression mul_div_mod_tail .)


state 159

    (90) mul_div_mod_tail -> TIMES . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 160

    (91) mul_div_mod_tail -> DIVIDE . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 161

    (92) mul_div_mod_tail -> MODULO . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    unary_expression               shift and go to state 203
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 162

    (93) mul_div_mod_tail -> empty .

    PLUS            reduce using rule 93 (mul_div_mod_tail -> empty .)
    MINUS           reduce using rule 93 (mul_div_mod_tail -> empty .)
    LESS_THAN       reduce using rule 93 (mul_div_mod_tail -> empty .)
    LESS_THAN_EQUAL reduce using rule 93 (mul_div_mod_tail -> empty .)
    GREATER_THAN    reduce using rule 93 (mul_div_mod_tail -> empty .)
    GREATER_THAN_EQUAL reduce using rule 93 (mul_div_mod_tail -> empty .)
    EQUAL           reduce using rule 93 (mul_div_mod_tail -> empty .)
    LOGICAL_NOT     reduce using rule 93 (mul_div_mod_tail -> empty .)
    ASSIGN          reduce using rule 93 (mul_div_mod_tail -> empty .)
    SEMICOLON       reduce using rule 93 (mul_div_mod_tail -> empty .)
    RPAREN          reduce using rule 93 (mul_div_mod_tail -> empty .)
    RBRACKET        reduce using rule 93 (mul_div_mod_tail -> empty .)
    COMMA           reduce using rule 93 (mul_div_mod_tail -> empty .)
    RBRACE          reduce using rule 93 (mul_div_mod_tail -> empty .)


state 163

    (119) function_num_expression -> LENGTH LPAREN . ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 204


state 164

    (29) variable_declaration -> type_specification ID SEMICOLON .

    RETURN          reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    IF              reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    FOR             reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    WHILE           reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    INT             reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    FLOAT           reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    CHAR            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    BOOL            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    GRAPH           reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    EDGE            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    NODE            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    VOID            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    ADD_NODE        reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    ADD_EDGE        reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    REMOVE_NODE     reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    REMOVE_EDGE     reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    SHOW            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    DFS             reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    MINUS           reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    PLUS            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    ID              reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    INT_CONST       reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    LOGICAL_NOT     reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    TRUE            reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    FALSE           reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    LPAREN          reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    FLOAT_CONST     reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    LENGTH          reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    RBRACE          reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)
    SEMICOLON       reduce using rule 29 (variable_declaration -> type_specification ID SEMICOLON .)


state 165

    (30) variable_declaration -> type_specification ID ASSIGN . expression_statement SEMICOLON
    (58) expression_statement -> . expression SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression_statement           shift and go to state 205
    expression                     shift and go to state 73
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 166

    (31) variable_declaration -> type_specification ID COMMA . variable_declaration SEMICOLON
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID

    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 10
    EDGE            shift and go to state 11
    NODE            shift and go to state 12
    VOID            shift and go to state 13

    type_specification             shift and go to state 60
    variable_declaration           shift and go to state 206

state 167

    (32) variable_declaration -> type_specification ID LBRACKET . INT_CONST RBRACKET SEMICOLON

    INT_CONST       shift and go to state 207


state 168

    (98) node_expression -> ID DOT ADJ . LBRACKET ID RBRACKET LBRACKET ID RBRACKET

    LBRACKET        shift and go to state 208


state 169

    (106) primary_expression -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 209


state 170

    (111) args_expression -> LPAREN RPAREN .

    TIMES           reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    MODULO          reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    PLUS            reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    MINUS           reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    LESS_THAN       reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    EQUAL           reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    LOGICAL_NOT     reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    ASSIGN          reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    RPAREN          reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    RBRACKET        reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    COMMA           reduce using rule 111 (args_expression -> LPAREN RPAREN .)
    RBRACE          reduce using rule 111 (args_expression -> LPAREN RPAREN .)


state 171

    (112) args_expression -> LPAREN assign_expression_list . RPAREN

    RPAREN          shift and go to state 210


state 172

    (113) assign_expression_list -> empty .

    RPAREN          reduce using rule 113 (assign_expression_list -> empty .)


state 173

    (114) assign_expression_list -> assign_expression .
    (115) assign_expression_list -> assign_expression . COMMA assign_expression_list

    RPAREN          reduce using rule 114 (assign_expression_list -> assign_expression .)
    COMMA           shift and go to state 211


state 174

    (60) if_statement -> IF LPAREN expression . RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> IF LPAREN expression . RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> IF LPAREN expression . RPAREN block ELSE if_statement

    RPAREN          shift and go to state 212


state 175

    (110) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN_EQUAL reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    LOGICAL_NOT     reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 110 (primary_expression -> LPAREN expression RPAREN .)


state 176

    (63) for_statement -> FOR LPAREN INT . ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    ID              shift and go to state 213


state 177

    (64) while_statement -> WHILE LPAREN expression . RPAREN block

    RPAREN          shift and go to state 214


state 178

    (48) add_node -> ADD_NODE LPAREN expression . COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 215


state 179

    (49) add_edge -> ADD_EDGE LPAREN expression . COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 216


state 180

    (50) remove_node -> REMOVE_NODE LPAREN expression . COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 217


state 181

    (51) remove_edge -> REMOVE_EDGE LPAREN expression . COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 218


state 182

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression . COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 219


state 183

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression . COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 220


state 184

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression . COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 221


state 185

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression . COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 222


state 186

    (56) show -> SHOW LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 223


state 187

    (57) dfs -> DFS LPAREN ID . COMMA node_expression COMMA ID RPAREN SEMICOLON

    COMMA           shift and go to state 224


state 188

    (68) assign_expression -> equality_expression ASSIGN assign_expression .

    SEMICOLON       reduce using rule 68 (assign_expression -> equality_expression ASSIGN assign_expression .)
    RPAREN          reduce using rule 68 (assign_expression -> equality_expression ASSIGN assign_expression .)
    RBRACKET        reduce using rule 68 (assign_expression -> equality_expression ASSIGN assign_expression .)
    COMMA           reduce using rule 68 (assign_expression -> equality_expression ASSIGN assign_expression .)
    RBRACE          reduce using rule 68 (assign_expression -> equality_expression ASSIGN assign_expression .)


state 189

    (70) assign_expression -> MINUS MINUS primary_expression .

    SEMICOLON       reduce using rule 70 (assign_expression -> MINUS MINUS primary_expression .)
    RPAREN          reduce using rule 70 (assign_expression -> MINUS MINUS primary_expression .)
    RBRACKET        reduce using rule 70 (assign_expression -> MINUS MINUS primary_expression .)
    COMMA           reduce using rule 70 (assign_expression -> MINUS MINUS primary_expression .)
    RBRACE          reduce using rule 70 (assign_expression -> MINUS MINUS primary_expression .)


state 190

    (71) assign_expression -> PLUS PLUS primary_expression .

    SEMICOLON       reduce using rule 71 (assign_expression -> PLUS PLUS primary_expression .)
    RPAREN          reduce using rule 71 (assign_expression -> PLUS PLUS primary_expression .)
    RBRACKET        reduce using rule 71 (assign_expression -> PLUS PLUS primary_expression .)
    COMMA           reduce using rule 71 (assign_expression -> PLUS PLUS primary_expression .)
    RBRACE          reduce using rule 71 (assign_expression -> PLUS PLUS primary_expression .)


state 191

    (73) equality_expression -> relational_expression EQUAL relational_expression .

    ASSIGN          reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)
    COMMA           reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 73 (equality_expression -> relational_expression EQUAL relational_expression .)


state 192

    (76) unary_expression -> PLUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 144
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 193

    (77) unary_expression -> MINUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 140
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 194

    (74) equality_expression -> relational_expression LOGICAL_NOT ASSIGN . relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    relational_expression          shift and go to state 225
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 195

    (81) compare_expression -> LESS_THAN add_sub_expression . compare_expression
    (80) compare_expression -> . empty
    (81) compare_expression -> . LESS_THAN add_sub_expression compare_expression
    (82) compare_expression -> . LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (83) compare_expression -> . GREATER_THAN add_sub_expression compare_expression
    (84) compare_expression -> . GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (65) empty -> .

    LESS_THAN       shift and go to state 150
    LESS_THAN_EQUAL shift and go to state 151
    GREATER_THAN    shift and go to state 152
    GREATER_THAN_EQUAL shift and go to state 153
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    compare_expression             shift and go to state 226
    empty                          shift and go to state 149

state 196

    (82) compare_expression -> LESS_THAN_EQUAL ASSIGN . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    add_sub_expression             shift and go to state 227
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 197

    (83) compare_expression -> GREATER_THAN add_sub_expression . compare_expression
    (80) compare_expression -> . empty
    (81) compare_expression -> . LESS_THAN add_sub_expression compare_expression
    (82) compare_expression -> . LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (83) compare_expression -> . GREATER_THAN add_sub_expression compare_expression
    (84) compare_expression -> . GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (65) empty -> .

    LESS_THAN       shift and go to state 150
    LESS_THAN_EQUAL shift and go to state 151
    GREATER_THAN    shift and go to state 152
    GREATER_THAN_EQUAL shift and go to state 153
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    compare_expression             shift and go to state 228
    empty                          shift and go to state 149

state 198

    (84) compare_expression -> GREATER_THAN_EQUAL ASSIGN . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    PLUS            shift and go to state 192
    MINUS           shift and go to state 193
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    add_sub_expression             shift and go to state 229
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    primary_expression             shift and go to state 96
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 199

    (86) add_sub_tail -> PLUS mul_div_mod_expression . add_sub_tail
    (86) add_sub_tail -> . PLUS mul_div_mod_expression add_sub_tail
    (87) add_sub_tail -> . MINUS mul_div_mod_expression add_sub_tail
    (88) add_sub_tail -> . empty
    (65) empty -> .

    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    add_sub_tail                   shift and go to state 230
    empty                          shift and go to state 157

state 200

    (87) add_sub_tail -> MINUS mul_div_mod_expression . add_sub_tail
    (86) add_sub_tail -> . PLUS mul_div_mod_expression add_sub_tail
    (87) add_sub_tail -> . MINUS mul_div_mod_expression add_sub_tail
    (88) add_sub_tail -> . empty
    (65) empty -> .

    PLUS            shift and go to state 155
    MINUS           shift and go to state 156
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    add_sub_tail                   shift and go to state 231
    empty                          shift and go to state 157

state 201

    (90) mul_div_mod_tail -> TIMES unary_expression . mul_div_mod_tail
    (90) mul_div_mod_tail -> . TIMES unary_expression mul_div_mod_tail
    (91) mul_div_mod_tail -> . DIVIDE unary_expression mul_div_mod_tail
    (92) mul_div_mod_tail -> . MODULO unary_expression mul_div_mod_tail
    (93) mul_div_mod_tail -> . empty
    (65) empty -> .

    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160
    MODULO          shift and go to state 161
    PLUS            reduce using rule 65 (empty -> .)
    MINUS           reduce using rule 65 (empty -> .)
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    mul_div_mod_tail               shift and go to state 232
    empty                          shift and go to state 162

state 202

    (91) mul_div_mod_tail -> DIVIDE unary_expression . mul_div_mod_tail
    (90) mul_div_mod_tail -> . TIMES unary_expression mul_div_mod_tail
    (91) mul_div_mod_tail -> . DIVIDE unary_expression mul_div_mod_tail
    (92) mul_div_mod_tail -> . MODULO unary_expression mul_div_mod_tail
    (93) mul_div_mod_tail -> . empty
    (65) empty -> .

    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160
    MODULO          shift and go to state 161
    PLUS            reduce using rule 65 (empty -> .)
    MINUS           reduce using rule 65 (empty -> .)
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    mul_div_mod_tail               shift and go to state 233
    empty                          shift and go to state 162

state 203

    (92) mul_div_mod_tail -> MODULO unary_expression . mul_div_mod_tail
    (90) mul_div_mod_tail -> . TIMES unary_expression mul_div_mod_tail
    (91) mul_div_mod_tail -> . DIVIDE unary_expression mul_div_mod_tail
    (92) mul_div_mod_tail -> . MODULO unary_expression mul_div_mod_tail
    (93) mul_div_mod_tail -> . empty
    (65) empty -> .

    TIMES           shift and go to state 159
    DIVIDE          shift and go to state 160
    MODULO          shift and go to state 161
    PLUS            reduce using rule 65 (empty -> .)
    MINUS           reduce using rule 65 (empty -> .)
    LESS_THAN       reduce using rule 65 (empty -> .)
    LESS_THAN_EQUAL reduce using rule 65 (empty -> .)
    GREATER_THAN    reduce using rule 65 (empty -> .)
    GREATER_THAN_EQUAL reduce using rule 65 (empty -> .)
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    mul_div_mod_tail               shift and go to state 234
    empty                          shift and go to state 162

state 204

    (119) function_num_expression -> LENGTH LPAREN ID . DOT ADJ LBRACKET ID RBRACKET RPAREN

    DOT             shift and go to state 235


state 205

    (30) variable_declaration -> type_specification ID ASSIGN expression_statement . SEMICOLON

    SEMICOLON       shift and go to state 236


state 206

    (31) variable_declaration -> type_specification ID COMMA variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 237


state 207

    (32) variable_declaration -> type_specification ID LBRACKET INT_CONST . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 238


state 208

    (98) node_expression -> ID DOT ADJ LBRACKET . ID RBRACKET LBRACKET ID RBRACKET

    ID              shift and go to state 239


state 209

    (106) primary_expression -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    LESS_THAN_EQUAL reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN_EQUAL reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    LOGICAL_NOT     reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 106 (primary_expression -> ID LBRACKET expression RBRACKET .)


state 210

    (112) args_expression -> LPAREN assign_expression_list RPAREN .

    TIMES           reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    DIVIDE          reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    MODULO          reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    PLUS            reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    MINUS           reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    LESS_THAN       reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    LESS_THAN_EQUAL reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    GREATER_THAN    reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    EQUAL           reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    LOGICAL_NOT     reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    ASSIGN          reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    SEMICOLON       reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    RPAREN          reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    RBRACKET        reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    COMMA           reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)
    RBRACE          reduce using rule 112 (args_expression -> LPAREN assign_expression_list RPAREN .)


state 211

    (115) assign_expression_list -> assign_expression COMMA . assign_expression_list
    (113) assign_expression_list -> . empty
    (114) assign_expression_list -> . assign_expression
    (115) assign_expression_list -> . assign_expression COMMA assign_expression_list
    (65) empty -> .
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RPAREN          reduce using rule 65 (empty -> .)
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    LOGICAL_NOT     shift and go to state 99
    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    assign_expression              shift and go to state 173
    assign_expression_list         shift and go to state 240
    empty                          shift and go to state 172
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 212

    (60) if_statement -> IF LPAREN expression RPAREN . LBRACE compound_statement RBRACE
    (61) if_statement -> IF LPAREN expression RPAREN . block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> IF LPAREN expression RPAREN . block ELSE if_statement
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 241

    block                          shift and go to state 242

state 213

    (63) for_statement -> FOR LPAREN INT ID . ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    ASSIGN          shift and go to state 243


state 214

    (64) while_statement -> WHILE LPAREN expression RPAREN . block
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 244

state 215

    (48) add_node -> ADD_NODE LPAREN expression COMMA . expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 245
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 216

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA . LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LBRACE          shift and go to state 246


state 217

    (50) remove_node -> REMOVE_NODE LPAREN expression COMMA . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 247
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 218

    (51) remove_edge -> REMOVE_EDGE LPAREN expression COMMA . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 248
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 219

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA . expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 249
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 220

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA . expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 250
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 221

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA . expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 251
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 222

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA . expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 252
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 223

    (56) show -> SHOW LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 253


state 224

    (57) dfs -> DFS LPAREN ID COMMA . node_expression COMMA ID RPAREN SEMICOLON
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST

    ID              shift and go to state 254
    INT_CONST       shift and go to state 256

    node_expression                shift and go to state 255

state 225

    (74) equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .

    ASSIGN          reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)
    SEMICOLON       reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)
    RPAREN          reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)
    RBRACKET        reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)
    COMMA           reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)
    RBRACE          reduce using rule 74 (equality_expression -> relational_expression LOGICAL_NOT ASSIGN relational_expression .)


state 226

    (81) compare_expression -> LESS_THAN add_sub_expression compare_expression .

    EQUAL           reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    LOGICAL_NOT     reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    ASSIGN          reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    SEMICOLON       reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    RPAREN          reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    RBRACKET        reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    COMMA           reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)
    RBRACE          reduce using rule 81 (compare_expression -> LESS_THAN add_sub_expression compare_expression .)


state 227

    (82) compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression . compare_expression
    (80) compare_expression -> . empty
    (81) compare_expression -> . LESS_THAN add_sub_expression compare_expression
    (82) compare_expression -> . LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (83) compare_expression -> . GREATER_THAN add_sub_expression compare_expression
    (84) compare_expression -> . GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (65) empty -> .

    LESS_THAN       shift and go to state 150
    LESS_THAN_EQUAL shift and go to state 151
    GREATER_THAN    shift and go to state 152
    GREATER_THAN_EQUAL shift and go to state 153
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    compare_expression             shift and go to state 257
    empty                          shift and go to state 149

state 228

    (83) compare_expression -> GREATER_THAN add_sub_expression compare_expression .

    EQUAL           reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    LOGICAL_NOT     reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    ASSIGN          reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    SEMICOLON       reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    RPAREN          reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    RBRACKET        reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    COMMA           reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)
    RBRACE          reduce using rule 83 (compare_expression -> GREATER_THAN add_sub_expression compare_expression .)


state 229

    (84) compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression . compare_expression
    (80) compare_expression -> . empty
    (81) compare_expression -> . LESS_THAN add_sub_expression compare_expression
    (82) compare_expression -> . LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (83) compare_expression -> . GREATER_THAN add_sub_expression compare_expression
    (84) compare_expression -> . GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression
    (65) empty -> .

    LESS_THAN       shift and go to state 150
    LESS_THAN_EQUAL shift and go to state 151
    GREATER_THAN    shift and go to state 152
    GREATER_THAN_EQUAL shift and go to state 153
    EQUAL           reduce using rule 65 (empty -> .)
    LOGICAL_NOT     reduce using rule 65 (empty -> .)
    ASSIGN          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    RBRACKET        reduce using rule 65 (empty -> .)
    COMMA           reduce using rule 65 (empty -> .)
    RBRACE          reduce using rule 65 (empty -> .)

    compare_expression             shift and go to state 258
    empty                          shift and go to state 149

state 230

    (86) add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .

    LESS_THAN       reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    LESS_THAN_EQUAL reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    GREATER_THAN    reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    GREATER_THAN_EQUAL reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    EQUAL           reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    LOGICAL_NOT     reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    ASSIGN          reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    SEMICOLON       reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    RPAREN          reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    RBRACKET        reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    COMMA           reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)
    RBRACE          reduce using rule 86 (add_sub_tail -> PLUS mul_div_mod_expression add_sub_tail .)


state 231

    (87) add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .

    LESS_THAN       reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    LESS_THAN_EQUAL reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    GREATER_THAN    reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    GREATER_THAN_EQUAL reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    EQUAL           reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    LOGICAL_NOT     reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    ASSIGN          reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    SEMICOLON       reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    RPAREN          reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    RBRACKET        reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    COMMA           reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)
    RBRACE          reduce using rule 87 (add_sub_tail -> MINUS mul_div_mod_expression add_sub_tail .)


state 232

    (90) mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .

    PLUS            reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    MINUS           reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    LESS_THAN       reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    LESS_THAN_EQUAL reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    GREATER_THAN    reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    GREATER_THAN_EQUAL reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    EQUAL           reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    LOGICAL_NOT     reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    ASSIGN          reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    SEMICOLON       reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    RPAREN          reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    RBRACKET        reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    COMMA           reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)
    RBRACE          reduce using rule 90 (mul_div_mod_tail -> TIMES unary_expression mul_div_mod_tail .)


state 233

    (91) mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .

    PLUS            reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    MINUS           reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    LESS_THAN       reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    LESS_THAN_EQUAL reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    GREATER_THAN    reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    GREATER_THAN_EQUAL reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    EQUAL           reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    LOGICAL_NOT     reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    ASSIGN          reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    SEMICOLON       reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    RPAREN          reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    RBRACKET        reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    COMMA           reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)
    RBRACE          reduce using rule 91 (mul_div_mod_tail -> DIVIDE unary_expression mul_div_mod_tail .)


state 234

    (92) mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .

    PLUS            reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    MINUS           reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    LESS_THAN       reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    LESS_THAN_EQUAL reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    GREATER_THAN    reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    GREATER_THAN_EQUAL reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    EQUAL           reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    LOGICAL_NOT     reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    ASSIGN          reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    SEMICOLON       reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    RPAREN          reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    RBRACKET        reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    COMMA           reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)
    RBRACE          reduce using rule 92 (mul_div_mod_tail -> MODULO unary_expression mul_div_mod_tail .)


state 235

    (119) function_num_expression -> LENGTH LPAREN ID DOT . ADJ LBRACKET ID RBRACKET RPAREN

    ADJ             shift and go to state 259


state 236

    (30) variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .

    RETURN          reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    IF              reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    FOR             reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    WHILE           reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    INT             reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    FLOAT           reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    CHAR            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    BOOL            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    GRAPH           reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    EDGE            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    NODE            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    VOID            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    ADD_NODE        reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    ADD_EDGE        reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    REMOVE_NODE     reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    REMOVE_EDGE     reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    SHOW            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    DFS             reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    MINUS           reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    PLUS            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    ID              reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    INT_CONST       reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    LOGICAL_NOT     reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    TRUE            reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    FALSE           reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    LPAREN          reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    FLOAT_CONST     reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    LENGTH          reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    RBRACE          reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)
    SEMICOLON       reduce using rule 30 (variable_declaration -> type_specification ID ASSIGN expression_statement SEMICOLON .)


state 237

    (31) variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .

    RETURN          reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    IF              reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    FOR             reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    WHILE           reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    INT             reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    FLOAT           reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    CHAR            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    BOOL            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    GRAPH           reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    EDGE            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    NODE            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    VOID            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    ADD_NODE        reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    ADD_EDGE        reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    REMOVE_NODE     reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    REMOVE_EDGE     reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    SHOW            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    DFS             reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    MINUS           reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    PLUS            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    ID              reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    INT_CONST       reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    LOGICAL_NOT     reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    TRUE            reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    FALSE           reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    LPAREN          reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    FLOAT_CONST     reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    LENGTH          reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    RBRACE          reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)
    SEMICOLON       reduce using rule 31 (variable_declaration -> type_specification ID COMMA variable_declaration SEMICOLON .)


state 238

    (32) variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 260


state 239

    (98) node_expression -> ID DOT ADJ LBRACKET ID . RBRACKET LBRACKET ID RBRACKET

    RBRACKET        shift and go to state 261


state 240

    (115) assign_expression_list -> assign_expression COMMA assign_expression_list .

    RPAREN          reduce using rule 115 (assign_expression_list -> assign_expression COMMA assign_expression_list .)


state 241

    (60) if_statement -> IF LPAREN expression RPAREN LBRACE . compound_statement RBRACE
    (24) block -> LBRACE . compound_statement RBRACE
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 73
    compound_statement             shift and go to state 262
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable_declaration           shift and go to state 53
    special_function               shift and go to state 54
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 242

    (61) if_statement -> IF LPAREN expression RPAREN block . ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> IF LPAREN expression RPAREN block . ELSE if_statement

    ELSE            shift and go to state 263


state 243

    (63) for_statement -> FOR LPAREN INT ID ASSIGN . INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    INT_CONST       shift and go to state 264


state 244

    (64) while_statement -> WHILE LPAREN expression RPAREN block .

    RETURN          reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    IF              reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FOR             reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    WHILE           reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    INT             reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FLOAT           reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    CHAR            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    BOOL            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    GRAPH           reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    EDGE            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    NODE            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    VOID            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    ADD_NODE        reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    ADD_EDGE        reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    REMOVE_NODE     reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    REMOVE_EDGE     reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    CHANGE_NODE_RGB reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    CHANGE_NODE_X   reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    CHANGE_NODE_Y   reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    CHANGE_EDGE_RGB reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    SHOW            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    DFS             reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    MINUS           reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    PLUS            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    ID              reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    INT_CONST       reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    LOGICAL_NOT     reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    TRUE            reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FALSE           reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    LPAREN          reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    FLOAT_CONST     reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    LENGTH          reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)
    RBRACE          reduce using rule 64 (while_statement -> WHILE LPAREN expression RPAREN block .)


state 245

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression . COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 265


state 246

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE . expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 266
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 247

    (50) remove_node -> REMOVE_NODE LPAREN expression COMMA expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 267


state 248

    (51) remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 268


state 249

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression . COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 269


state 250

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression . COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 270


state 251

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression . COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 271


state 252

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression . COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 272


state 253

    (56) show -> SHOW LPAREN expression RPAREN SEMICOLON .

    RETURN          reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    NODE            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    VOID            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    DFS             reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 56 (show -> SHOW LPAREN expression RPAREN SEMICOLON .)


state 254

    (97) node_expression -> ID .
    (98) node_expression -> ID . DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET

    COMMA           reduce using rule 97 (node_expression -> ID .)
    DOT             shift and go to state 115


state 255

    (57) dfs -> DFS LPAREN ID COMMA node_expression . COMMA ID RPAREN SEMICOLON

    COMMA           shift and go to state 273


state 256

    (99) node_expression -> INT_CONST .

    COMMA           reduce using rule 99 (node_expression -> INT_CONST .)


state 257

    (82) compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .

    EQUAL           reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    LOGICAL_NOT     reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    ASSIGN          reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    SEMICOLON       reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RPAREN          reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RBRACKET        reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    COMMA           reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RBRACE          reduce using rule 82 (compare_expression -> LESS_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)


state 258

    (84) compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .

    EQUAL           reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    LOGICAL_NOT     reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    ASSIGN          reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    SEMICOLON       reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RPAREN          reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RBRACKET        reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    COMMA           reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)
    RBRACE          reduce using rule 84 (compare_expression -> GREATER_THAN_EQUAL ASSIGN add_sub_expression compare_expression .)


state 259

    (119) function_num_expression -> LENGTH LPAREN ID DOT ADJ . LBRACKET ID RBRACKET RPAREN

    LBRACKET        shift and go to state 274


state 260

    (32) variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .

    RETURN          reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    IF              reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    FOR             reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    WHILE           reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    INT             reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    CHAR            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    BOOL            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    GRAPH           reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    EDGE            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    NODE            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    VOID            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    ADD_NODE        reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    ADD_EDGE        reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    REMOVE_NODE     reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    REMOVE_EDGE     reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    SHOW            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    DFS             reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    MINUS           reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    PLUS            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    ID              reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    INT_CONST       reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    LOGICAL_NOT     reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    TRUE            reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    FALSE           reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    FLOAT_CONST     reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    LENGTH          reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 32 (variable_declaration -> type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON .)


state 261

    (98) node_expression -> ID DOT ADJ LBRACKET ID RBRACKET . LBRACKET ID RBRACKET

    LBRACKET        shift and go to state 275


state 262

    (60) if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement . RBRACE
    (24) block -> LBRACE compound_statement . RBRACE

    RBRACE          shift and go to state 276


state 263

    (61) if_statement -> IF LPAREN expression RPAREN block ELSE . LBRACE compound_statement RBRACE
    (62) if_statement -> IF LPAREN expression RPAREN block ELSE . if_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement

    LBRACE          shift and go to state 277
    IF              shift and go to state 75

    if_statement                   shift and go to state 278

state 264

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST . SEMICOLON expression SEMICOLON post_increment_expression RPAREN block

    SEMICOLON       shift and go to state 279


state 265

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA . LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LBRACE          shift and go to state 280


state 266

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression . COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 281


state 267

    (50) remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 282


state 268

    (51) remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 283


state 269

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA . LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    LBRACE          shift and go to state 284


state 270

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 285
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 271

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 286
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 272

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA . expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 287
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 273

    (57) dfs -> DFS LPAREN ID COMMA node_expression COMMA . ID RPAREN SEMICOLON

    ID              shift and go to state 288


state 274

    (119) function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET . ID RBRACKET RPAREN

    ID              shift and go to state 289


state 275

    (98) node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET . ID RBRACKET

    ID              shift and go to state 290


state 276

    (60) if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .
    (24) block -> LBRACE compound_statement RBRACE .

    RETURN          reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    IF              reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    FOR             reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    WHILE           reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    INT             reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    FLOAT           reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    CHAR            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    BOOL            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    GRAPH           reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    EDGE            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    NODE            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    VOID            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    ADD_NODE        reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    ADD_EDGE        reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    REMOVE_NODE     reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    REMOVE_EDGE     reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    CHANGE_NODE_RGB reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    CHANGE_NODE_X   reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    CHANGE_NODE_Y   reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    CHANGE_EDGE_RGB reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    SHOW            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    DFS             reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    MINUS           reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    PLUS            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    ID              reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    INT_CONST       reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    LOGICAL_NOT     reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    TRUE            reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    FALSE           reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    LPAREN          reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    FLOAT_CONST     reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    LENGTH          reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    RBRACE          reduce using rule 60 (if_statement -> IF LPAREN expression RPAREN LBRACE compound_statement RBRACE .)
    ELSE            reduce using rule 24 (block -> LBRACE compound_statement RBRACE .)


state 277

    (61) if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE . compound_statement RBRACE
    (25) compound_statement -> . statement compound_statement
    (26) compound_statement -> . empty
    (27) compound_statement -> . variable_declaration compound_statement
    (28) compound_statement -> . special_function compound_statement
    (33) statement -> . expression_statement
    (34) statement -> . return_statement
    (35) statement -> . if_statement
    (36) statement -> . for_statement
    (37) statement -> . while_statement
    (65) empty -> .
    (29) variable_declaration -> . type_specification ID SEMICOLON
    (30) variable_declaration -> . type_specification ID ASSIGN expression_statement SEMICOLON
    (31) variable_declaration -> . type_specification ID COMMA variable_declaration SEMICOLON
    (32) variable_declaration -> . type_specification ID LBRACKET INT_CONST RBRACKET SEMICOLON
    (38) special_function -> . add_node
    (39) special_function -> . add_edge
    (40) special_function -> . remove_node
    (41) special_function -> . remove_edge
    (42) special_function -> . change_node_rgb
    (43) special_function -> . change_node_x
    (44) special_function -> . change_node_y
    (45) special_function -> . change_edge_rgb
    (46) special_function -> . show
    (47) special_function -> . dfs
    (58) expression_statement -> . expression SEMICOLON
    (59) return_statement -> . RETURN expression_statement
    (60) if_statement -> . IF LPAREN expression RPAREN LBRACE compound_statement RBRACE
    (61) if_statement -> . IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE
    (62) if_statement -> . IF LPAREN expression RPAREN block ELSE if_statement
    (63) for_statement -> . FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block
    (64) while_statement -> . WHILE LPAREN expression RPAREN block
    (16) type_specification -> . INT
    (17) type_specification -> . FLOAT
    (18) type_specification -> . CHAR
    (19) type_specification -> . BOOL
    (20) type_specification -> . GRAPH
    (21) type_specification -> . EDGE
    (22) type_specification -> . NODE
    (23) type_specification -> . VOID
    (48) add_node -> . ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (49) add_edge -> . ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (50) remove_node -> . REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON
    (51) remove_edge -> . REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON
    (52) change_node_rgb -> . CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (53) change_node_x -> . CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (54) change_node_y -> . CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON
    (55) change_edge_rgb -> . CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON
    (56) show -> . SHOW LPAREN expression RPAREN SEMICOLON
    (57) dfs -> . DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    RBRACE          reduce using rule 65 (empty -> .)
    RETURN          shift and go to state 74
    IF              shift and go to state 75
    FOR             shift and go to state 77
    WHILE           shift and go to state 78
    INT             shift and go to state 6
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 8
    BOOL            shift and go to state 9
    GRAPH           shift and go to state 79
    EDGE            shift and go to state 80
    NODE            shift and go to state 81
    VOID            shift and go to state 13
    ADD_NODE        shift and go to state 82
    ADD_EDGE        shift and go to state 83
    REMOVE_NODE     shift and go to state 84
    REMOVE_EDGE     shift and go to state 85
    CHANGE_NODE_RGB shift and go to state 86
    CHANGE_NODE_X   shift and go to state 87
    CHANGE_NODE_Y   shift and go to state 88
    CHANGE_EDGE_RGB shift and go to state 89
    SHOW            shift and go to state 90
    DFS             shift and go to state 91
    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 73
    compound_statement             shift and go to state 291
    statement                      shift and go to state 51
    empty                          shift and go to state 52
    variable_declaration           shift and go to state 53
    special_function               shift and go to state 54
    expression_statement           shift and go to state 55
    return_statement               shift and go to state 56
    if_statement                   shift and go to state 57
    for_statement                  shift and go to state 58
    while_statement                shift and go to state 59
    type_specification             shift and go to state 60
    add_node                       shift and go to state 63
    add_edge                       shift and go to state 64
    remove_node                    shift and go to state 65
    remove_edge                    shift and go to state 66
    change_node_rgb                shift and go to state 67
    change_node_x                  shift and go to state 68
    change_node_y                  shift and go to state 69
    change_edge_rgb                shift and go to state 70
    show                           shift and go to state 71
    dfs                            shift and go to state 72
    node_expression                shift and go to state 92
    assign_expression              shift and go to state 93
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 278

    (62) if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .

    RETURN          reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    IF              reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    FOR             reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    WHILE           reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    INT             reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    FLOAT           reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    CHAR            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    BOOL            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    GRAPH           reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    EDGE            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    NODE            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    VOID            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    ADD_NODE        reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    ADD_EDGE        reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    REMOVE_NODE     reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    REMOVE_EDGE     reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    CHANGE_NODE_RGB reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    CHANGE_NODE_X   reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    CHANGE_NODE_Y   reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    CHANGE_EDGE_RGB reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    SHOW            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    DFS             reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    MINUS           reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    PLUS            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    ID              reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    INT_CONST       reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    LOGICAL_NOT     reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    TRUE            reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    FALSE           reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    LPAREN          reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    FLOAT_CONST     reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    LENGTH          reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)
    RBRACE          reduce using rule 62 (if_statement -> IF LPAREN expression RPAREN block ELSE if_statement .)


state 279

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON . expression SEMICOLON post_increment_expression RPAREN block
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 292
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 280

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE . expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 293
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 281

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA . expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 294
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 282

    (50) remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .

    RETURN          reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FOR             reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    NODE            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    VOID            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    DFS             reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 50 (remove_node -> REMOVE_NODE LPAREN expression COMMA expression RPAREN SEMICOLON .)


state 283

    (51) remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .

    RETURN          reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FOR             reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    NODE            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    VOID            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    DFS             reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 51 (remove_edge -> REMOVE_EDGE LPAREN expression COMMA expression RPAREN SEMICOLON .)


state 284

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE . expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 295
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 285

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 296


state 286

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 297


state 287

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression . COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 298


state 288

    (57) dfs -> DFS LPAREN ID COMMA node_expression COMMA ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 299


state 289

    (119) function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID . RBRACKET RPAREN

    RBRACKET        shift and go to state 300


state 290

    (98) node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID . RBRACKET

    RBRACKET        shift and go to state 301


state 291

    (61) if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement . RBRACE

    RBRACE          shift and go to state 302


state 292

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression . SEMICOLON post_increment_expression RPAREN block

    SEMICOLON       shift and go to state 303


state 293

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression . COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 304


state 294

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression . COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 305


state 295

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression . COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 306


state 296

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 307


state 297

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 308


state 298

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA . expression COMMA expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 309
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 299

    (57) dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 310


state 300

    (119) function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET . RPAREN

    RPAREN          shift and go to state 311


state 301

    (98) node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .

    SEMICOLON       reduce using rule 98 (node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 98 (node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .)
    RBRACKET        reduce using rule 98 (node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 98 (node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .)
    RBRACE          reduce using rule 98 (node_expression -> ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET .)


state 302

    (61) if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .

    RETURN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    IF              reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    FOR             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    WHILE           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    INT             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    FLOAT           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    CHAR            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    BOOL            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    GRAPH           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    EDGE            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    NODE            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    VOID            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    ADD_NODE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    ADD_EDGE        reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    REMOVE_NODE     reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    REMOVE_EDGE     reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    CHANGE_NODE_RGB reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    CHANGE_NODE_X   reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    CHANGE_NODE_Y   reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    CHANGE_EDGE_RGB reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    SHOW            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    DFS             reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    MINUS           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    PLUS            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    ID              reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    INT_CONST       reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    LOGICAL_NOT     reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    TRUE            reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    FALSE           reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    LPAREN          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    FLOAT_CONST     reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    LENGTH          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)
    RBRACE          reduce using rule 61 (if_statement -> IF LPAREN expression RPAREN block ELSE LBRACE compound_statement RBRACE .)


state 303

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON . post_increment_expression RPAREN block
    (95) post_increment_expression -> . PLUS PLUS primary_expression
    (96) post_increment_expression -> . MINUS MINUS primary_expression

    PLUS            shift and go to state 313
    MINUS           shift and go to state 314

    post_increment_expression      shift and go to state 312

state 304

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA . expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 315
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 305

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA . expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 316
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 306

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA . expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 317
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 307

    (53) change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .

    RETURN          reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FOR             reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    NODE            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    VOID            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    DFS             reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 53 (change_node_x -> CHANGE_NODE_X LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)


state 308

    (54) change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .

    RETURN          reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FOR             reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    NODE            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    VOID            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    DFS             reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 54 (change_node_y -> CHANGE_NODE_Y LPAREN expression COMMA expression COMMA expression RPAREN SEMICOLON .)


state 309

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression . COMMA expression COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 318


state 310

    (57) dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .

    RETURN          reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    IF              reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    FOR             reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    INT             reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    FLOAT           reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    CHAR            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    BOOL            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    GRAPH           reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    EDGE            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    NODE            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    VOID            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    SHOW            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    DFS             reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    MINUS           reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    PLUS            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    ID              reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    TRUE            reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    FALSE           reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    LPAREN          reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    LENGTH          reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 57 (dfs -> DFS LPAREN ID COMMA node_expression COMMA ID RPAREN SEMICOLON .)


state 311

    (119) function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .

    TIMES           reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    DIVIDE          reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    MODULO          reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    PLUS            reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    MINUS           reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    LESS_THAN       reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    LESS_THAN_EQUAL reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    GREATER_THAN    reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    EQUAL           reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    LOGICAL_NOT     reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    ASSIGN          reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    SEMICOLON       reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    RPAREN          reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    RBRACKET        reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    COMMA           reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)
    RBRACE          reduce using rule 119 (function_num_expression -> LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN .)


state 312

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression . RPAREN block

    RPAREN          shift and go to state 319


state 313

    (95) post_increment_expression -> PLUS . PLUS primary_expression

    PLUS            shift and go to state 320


state 314

    (96) post_increment_expression -> MINUS . MINUS primary_expression

    MINUS           shift and go to state 321


state 315

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression . COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 322


state 316

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression . COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 323


state 317

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression . COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 324


state 318

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA . expression COMMA expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 325
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 319

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN . block
    (24) block -> . LBRACE compound_statement RBRACE

    LBRACE          shift and go to state 43

    block                          shift and go to state 326

state 320

    (95) post_increment_expression -> PLUS PLUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 327
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 321

    (96) post_increment_expression -> MINUS MINUS . primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    ID              shift and go to state 141
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    INT_CONST       shift and go to state 142
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    primary_expression             shift and go to state 328
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 322

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA . expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 329
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 323

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA . expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 330
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 324

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA . expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 331
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 325

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression . COMMA expression RPAREN SEMICOLON

    COMMA           shift and go to state 332


state 326

    (63) for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .

    RETURN          reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    IF              reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    FOR             reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    WHILE           reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    INT             reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    FLOAT           reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    CHAR            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    BOOL            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    GRAPH           reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    EDGE            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    NODE            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    VOID            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    ADD_NODE        reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    ADD_EDGE        reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    REMOVE_NODE     reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    REMOVE_EDGE     reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    CHANGE_NODE_RGB reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    CHANGE_NODE_X   reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    CHANGE_NODE_Y   reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    CHANGE_EDGE_RGB reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    SHOW            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    DFS             reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    MINUS           reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    PLUS            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    ID              reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    INT_CONST       reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    LOGICAL_NOT     reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    TRUE            reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    FALSE           reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    LPAREN          reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    FLOAT_CONST     reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    LENGTH          reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)
    RBRACE          reduce using rule 63 (for_statement -> FOR LPAREN INT ID ASSIGN INT_CONST SEMICOLON expression SEMICOLON post_increment_expression RPAREN block .)


state 327

    (95) post_increment_expression -> PLUS PLUS primary_expression .

    RPAREN          reduce using rule 95 (post_increment_expression -> PLUS PLUS primary_expression .)


state 328

    (96) post_increment_expression -> MINUS MINUS primary_expression .

    RPAREN          reduce using rule 96 (post_increment_expression -> MINUS MINUS primary_expression .)


state 329

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression . COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 333


state 330

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression . COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 334


state 331

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression . RBRACE RPAREN SEMICOLON

    RBRACE          shift and go to state 335


state 332

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA . expression RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 336
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 333

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA . expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 337
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 334

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA . expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 338
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 335

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE . RPAREN SEMICOLON

    RPAREN          shift and go to state 339


state 336

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 340


state 337

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression . COMMA expression COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 341


state 338

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression . COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 342


state 339

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 343


state 340

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 344


state 341

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA . expression COMMA expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 345
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 342

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA . expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 346
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 343

    (52) change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .

    RETURN          reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    IF              reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FOR             reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT             reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT           reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHAR            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    BOOL            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    GRAPH           reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    EDGE            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    NODE            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    VOID            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    SHOW            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    DFS             reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    MINUS           reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    PLUS            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ID              reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    TRUE            reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FALSE           reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LPAREN          reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LENGTH          reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    RBRACE          reduce using rule 52 (change_node_rgb -> CHANGE_NODE_RGB LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)


state 344

    (55) change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .

    RETURN          reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    IF              reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FOR             reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT             reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHAR            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    BOOL            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    GRAPH           reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    EDGE            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    NODE            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    VOID            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    SHOW            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    DFS             reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    ID              reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    LENGTH          reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 55 (change_edge_rgb -> CHANGE_EDGE_RGB LPAREN expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RPAREN SEMICOLON .)


state 345

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression . COMMA expression RBRACE RPAREN SEMICOLON

    COMMA           shift and go to state 347


state 346

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression . RBRACE RPAREN SEMICOLON

    RBRACE          shift and go to state 348


state 347

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA . expression RBRACE RPAREN SEMICOLON
    (66) expression -> . assign_expression
    (67) expression -> . node_expression
    (68) assign_expression -> . equality_expression ASSIGN assign_expression
    (69) assign_expression -> . equality_expression
    (70) assign_expression -> . MINUS MINUS primary_expression
    (71) assign_expression -> . PLUS PLUS primary_expression
    (97) node_expression -> . ID
    (98) node_expression -> . ID DOT ADJ LBRACKET ID RBRACKET LBRACKET ID RBRACKET
    (99) node_expression -> . INT_CONST
    (72) equality_expression -> . relational_expression
    (73) equality_expression -> . relational_expression EQUAL relational_expression
    (74) equality_expression -> . relational_expression LOGICAL_NOT ASSIGN relational_expression
    (79) relational_expression -> . add_sub_expression compare_expression
    (85) add_sub_expression -> . mul_div_mod_expression add_sub_tail
    (89) mul_div_mod_expression -> . unary_expression mul_div_mod_tail
    (75) unary_expression -> . primary_expression
    (76) unary_expression -> . PLUS primary_expression
    (77) unary_expression -> . MINUS primary_expression
    (78) unary_expression -> . LOGICAL_NOT primary_expression
    (101) primary_expression -> . ID
    (102) primary_expression -> . ID args_expression
    (103) primary_expression -> . TRUE
    (104) primary_expression -> . FALSE
    (105) primary_expression -> . num_expression
    (106) primary_expression -> . ID LBRACKET expression RBRACKET
    (107) primary_expression -> . NODE
    (108) primary_expression -> . EDGE
    (109) primary_expression -> . GRAPH
    (110) primary_expression -> . LPAREN expression RPAREN
    (116) num_expression -> . INT_CONST
    (117) num_expression -> . FLOAT_CONST
    (118) num_expression -> . function_num_expression
    (119) function_num_expression -> . LENGTH LPAREN ID DOT ADJ LBRACKET ID RBRACKET RPAREN

    MINUS           shift and go to state 95
    PLUS            shift and go to state 97
    ID              shift and go to state 61
    INT_CONST       shift and go to state 62
    LOGICAL_NOT     shift and go to state 99
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NODE            shift and go to state 121
    EDGE            shift and go to state 122
    GRAPH           shift and go to state 123
    LPAREN          shift and go to state 76
    FLOAT_CONST     shift and go to state 106
    LENGTH          shift and go to state 108

    expression                     shift and go to state 349
    assign_expression              shift and go to state 93
    node_expression                shift and go to state 92
    equality_expression            shift and go to state 94
    primary_expression             shift and go to state 96
    relational_expression          shift and go to state 98
    add_sub_expression             shift and go to state 100
    mul_div_mod_expression         shift and go to state 101
    unary_expression               shift and go to state 102
    num_expression                 shift and go to state 105
    function_num_expression        shift and go to state 107

state 348

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE . RPAREN SEMICOLON

    RPAREN          shift and go to state 350


state 349

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression . RBRACE RPAREN SEMICOLON

    RBRACE          shift and go to state 351


state 350

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 352


state 351

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE . RPAREN SEMICOLON

    RPAREN          shift and go to state 353


state 352

    (49) add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .

    RETURN          reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    IF              reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FOR             reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    WHILE           reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT             reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT           reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHAR            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    BOOL            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    GRAPH           reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    EDGE            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    NODE            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    VOID            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    SHOW            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    DFS             reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    MINUS           reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    PLUS            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ID              reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    TRUE            reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FALSE           reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LPAREN          reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LENGTH          reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    RBRACE          reduce using rule 49 (add_edge -> ADD_EDGE LPAREN expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)


state 353

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 354


state 354

    (48) add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .

    RETURN          reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    IF              reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FOR             reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    WHILE           reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT             reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT           reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHAR            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    BOOL            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    GRAPH           reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    EDGE            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    NODE            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    VOID            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_NODE        reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ADD_EDGE        reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_NODE     reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    REMOVE_EDGE     reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_RGB reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_X   reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_NODE_Y   reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    CHANGE_EDGE_RGB reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    SHOW            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    DFS             reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    MINUS           reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    PLUS            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    ID              reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    INT_CONST       reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LOGICAL_NOT     reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    TRUE            reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FALSE           reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LPAREN          reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    LENGTH          reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)
    RBRACE          reduce using rule 48 (add_node -> ADD_NODE LPAREN expression COMMA expression COMMA LBRACE expression COMMA expression COMMA expression COMMA expression COMMA expression COMMA expression RBRACE RPAREN SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 118 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (node_expression -> ID)
WARNING: rejected rule (primary_expression -> ID) in state 61
WARNING: reduce/reduce conflict in state 62 resolved using rule (node_expression -> INT_CONST)
WARNING: rejected rule (num_expression -> INT_CONST) in state 62
